
/* /web/static/lib/jquery.touchSwipe/jquery.touchSwipe.js defined in bundle 'web.qunit_mobile_suite_tests' */
(function(factory){if(typeof define==='function'&&define.amd&&define.amd.jQuery){define(['jquery'],factory);}else if(typeof module!=='undefined'&&module.exports){factory(require("jquery"));}else{factory(jQuery);}}(function($){"use strict";var VERSION="1.6.18",LEFT="left",RIGHT="right",UP="up",DOWN="down",IN="in",OUT="out",NONE="none",AUTO="auto",SWIPE="swipe",PINCH="pinch",TAP="tap",DOUBLE_TAP="doubletap",LONG_TAP="longtap",HOLD="hold",HORIZONTAL="horizontal",VERTICAL="vertical",ALL_FINGERS="all",DOUBLE_TAP_THRESHOLD=10,PHASE_START="start",PHASE_MOVE="move",PHASE_END="end",PHASE_CANCEL="cancel",SUPPORTS_TOUCH='ontouchstart'in window,SUPPORTS_POINTER_IE10=window.navigator.msPointerEnabled&&!window.navigator.pointerEnabled&&!SUPPORTS_TOUCH,SUPPORTS_POINTER=(window.navigator.pointerEnabled||window.navigator.msPointerEnabled)&&!SUPPORTS_TOUCH,PLUGIN_NS='TouchSwipe';var defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:true,triggerOnTouchLeave:false,allowPageScroll:"auto",fallbackToMouseEvents:true,excludedElements:".noSwipe",preventDefaultEvents:true};$.fn.swipe=function(method){var $this=$(this),plugin=$this.data(PLUGIN_NS);if(plugin&&typeof method==='string'){if(plugin[method]){return plugin[method].apply(plugin,Array.prototype.slice.call(arguments,1));}else{$.error('Method '+method+' does not exist on jQuery.swipe');}}
else if(plugin&&typeof method==='object'){plugin['option'].apply(plugin,arguments);}
else if(!plugin&&(typeof method==='object'||!method)){return init.apply(this,arguments);}
return $this;};$.fn.swipe.version=VERSION;$.fn.swipe.defaults=defaults;$.fn.swipe.phases={PHASE_START:PHASE_START,PHASE_MOVE:PHASE_MOVE,PHASE_END:PHASE_END,PHASE_CANCEL:PHASE_CANCEL};$.fn.swipe.directions={LEFT:LEFT,RIGHT:RIGHT,UP:UP,DOWN:DOWN,IN:IN,OUT:OUT};$.fn.swipe.pageScroll={NONE:NONE,HORIZONTAL:HORIZONTAL,VERTICAL:VERTICAL,AUTO:AUTO};$.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:ALL_FINGERS};function init(options){if(options&&(options.allowPageScroll===undefined&&(options.swipe!==undefined||options.swipeStatus!==undefined))){options.allowPageScroll=NONE;}
if(options.click!==undefined&&options.tap===undefined){options.tap=options.click;}
if(!options){options={};}
options=$.extend({},$.fn.swipe.defaults,options);return this.each(function(){var $this=$(this);var plugin=$this.data(PLUGIN_NS);if(!plugin){plugin=new TouchSwipe(this,options);$this.data(PLUGIN_NS,plugin);}});}
function TouchSwipe(element,options){var options=$.extend({},options);var useTouchEvents=(SUPPORTS_TOUCH||SUPPORTS_POINTER||!options.fallbackToMouseEvents),START_EV=useTouchEvents?(SUPPORTS_POINTER?(SUPPORTS_POINTER_IE10?'MSPointerDown':'pointerdown'):'touchstart'):'mousedown',MOVE_EV=useTouchEvents?(SUPPORTS_POINTER?(SUPPORTS_POINTER_IE10?'MSPointerMove':'pointermove'):'touchmove'):'mousemove',END_EV=useTouchEvents?(SUPPORTS_POINTER?(SUPPORTS_POINTER_IE10?'MSPointerUp':'pointerup'):'touchend'):'mouseup',LEAVE_EV=useTouchEvents?(SUPPORTS_POINTER?'mouseleave':null):'mouseleave',CANCEL_EV=(SUPPORTS_POINTER?(SUPPORTS_POINTER_IE10?'MSPointerCancel':'pointercancel'):'touchcancel');var distance=0,direction=null,currentDirection=null,duration=0,startTouchesDistance=0,endTouchesDistance=0,pinchZoom=1,pinchDistance=0,pinchDirection=0,maximumsMap=null;var $element=$(element);var phase="start";var fingerCount=0;var fingerData={};var startTime=0,endTime=0,previousTouchEndTime=0,fingerCountAtRelease=0,doubleTapStartTime=0;var singleTapTimeout=null,holdTimeout=null;try{$element.bind(START_EV,touchStart);$element.bind(CANCEL_EV,touchCancel);}catch(e){$.error('events not supported '+START_EV+','+CANCEL_EV+' on jQuery.swipe');}
this.enable=function(){this.disable();$element.bind(START_EV,touchStart);$element.bind(CANCEL_EV,touchCancel);return $element;};this.disable=function(){removeListeners();return $element;};this.destroy=function(){removeListeners();$element.data(PLUGIN_NS,null);$element=null;};this.option=function(property,value){if(typeof property==='object'){options=$.extend(options,property);}else if(options[property]!==undefined){if(value===undefined){return options[property];}else{options[property]=value;}}else if(!property){return options;}else{$.error('Option '+property+' does not exist on jQuery.swipe.options');}
return null;}
function touchStart(jqEvent){if(getTouchInProgress()){return;}
if($(jqEvent.target).closest(options.excludedElements,$element).length>0){return;}
var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;if(event.pointerType&&event.pointerType=="mouse"&&options.fallbackToMouseEvents==false){return;};var ret,touches=event.touches,evt=touches?touches[0]:event;phase=PHASE_START;if(touches){fingerCount=touches.length;}
else if(options.preventDefaultEvents!==false){jqEvent.preventDefault();}
distance=0;direction=null;currentDirection=null;pinchDirection=null;duration=0;startTouchesDistance=0;endTouchesDistance=0;pinchZoom=1;pinchDistance=0;maximumsMap=createMaximumsData();cancelMultiFingerRelease();createFingerData(0,evt);if(!touches||(fingerCount===options.fingers||options.fingers===ALL_FINGERS)||hasPinches()){startTime=getTimeStamp();if(fingerCount==2){createFingerData(1,touches[1]);startTouchesDistance=endTouchesDistance=calculateTouchesDistance(fingerData[0].start,fingerData[1].start);}
if(options.swipeStatus||options.pinchStatus){ret=triggerHandler(event,phase);}}else{ret=false;}
if(ret===false){phase=PHASE_CANCEL;triggerHandler(event,phase);return ret;}else{if(options.hold){holdTimeout=setTimeout($.proxy(function(){$element.trigger('hold',[event.target]);if(options.hold){ret=options.hold.call($element,event,event.target);}},this),options.longTapThreshold);}
setTouchInProgress(true);}
return null;};function touchMove(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;if(phase===PHASE_END||phase===PHASE_CANCEL||inMultiFingerRelease())
return;var ret,touches=event.touches,evt=touches?touches[0]:event;var currentFinger=updateFingerData(evt);endTime=getTimeStamp();if(touches){fingerCount=touches.length;}
if(options.hold){clearTimeout(holdTimeout);}
phase=PHASE_MOVE;if(fingerCount==2){if(startTouchesDistance==0){createFingerData(1,touches[1]);startTouchesDistance=endTouchesDistance=calculateTouchesDistance(fingerData[0].start,fingerData[1].start);}else{updateFingerData(touches[1]);endTouchesDistance=calculateTouchesDistance(fingerData[0].end,fingerData[1].end);pinchDirection=calculatePinchDirection(fingerData[0].end,fingerData[1].end);}
pinchZoom=calculatePinchZoom(startTouchesDistance,endTouchesDistance);pinchDistance=Math.abs(startTouchesDistance-endTouchesDistance);}
if((fingerCount===options.fingers||options.fingers===ALL_FINGERS)||!touches||hasPinches()){direction=calculateDirection(currentFinger.start,currentFinger.end);currentDirection=calculateDirection(currentFinger.last,currentFinger.end);validateDefaultEvent(jqEvent,currentDirection);distance=calculateDistance(currentFinger.start,currentFinger.end);duration=calculateDuration();setMaxDistance(direction,distance);ret=triggerHandler(event,phase);if(!options.triggerOnTouchEnd||options.triggerOnTouchLeave){var inBounds=true;if(options.triggerOnTouchLeave){var bounds=getbounds(this);inBounds=isInBounds(currentFinger.end,bounds);}
if(!options.triggerOnTouchEnd&&inBounds){phase=getNextPhase(PHASE_MOVE);}
else if(options.triggerOnTouchLeave&&!inBounds){phase=getNextPhase(PHASE_END);}
if(phase==PHASE_CANCEL||phase==PHASE_END){triggerHandler(event,phase);}}}else{phase=PHASE_CANCEL;triggerHandler(event,phase);}
if(ret===false){phase=PHASE_CANCEL;triggerHandler(event,phase);}}
function touchEnd(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent,touches=event.touches;if(touches){if(touches.length&&!inMultiFingerRelease()){startMultiFingerRelease(event);return true;}else if(touches.length&&inMultiFingerRelease()){return true;}}
if(inMultiFingerRelease()){fingerCount=fingerCountAtRelease;}
endTime=getTimeStamp();duration=calculateDuration();if(didSwipeBackToCancel()||!validateSwipeDistance()){phase=PHASE_CANCEL;triggerHandler(event,phase);}else if(options.triggerOnTouchEnd||(options.triggerOnTouchEnd===false&&phase===PHASE_MOVE)){if(options.preventDefaultEvents!==false){jqEvent.preventDefault();}
phase=PHASE_END;triggerHandler(event,phase);}
else if(!options.triggerOnTouchEnd&&hasTap()){phase=PHASE_END;triggerHandlerForGesture(event,phase,TAP);}else if(phase===PHASE_MOVE){phase=PHASE_CANCEL;triggerHandler(event,phase);}
setTouchInProgress(false);return null;}
function touchCancel(){fingerCount=0;endTime=0;startTime=0;startTouchesDistance=0;endTouchesDistance=0;pinchZoom=1;cancelMultiFingerRelease();setTouchInProgress(false);}
function touchLeave(jqEvent){var event=jqEvent.originalEvent?jqEvent.originalEvent:jqEvent;if(options.triggerOnTouchLeave){phase=getNextPhase(PHASE_END);triggerHandler(event,phase);}}
function removeListeners(){$element.unbind(START_EV,touchStart);$element.unbind(CANCEL_EV,touchCancel);$element.unbind(MOVE_EV,touchMove);$element.unbind(END_EV,touchEnd);if(LEAVE_EV){$element.unbind(LEAVE_EV,touchLeave);}
setTouchInProgress(false);}
function getNextPhase(currentPhase){var nextPhase=currentPhase;var validTime=validateSwipeTime();var validDistance=validateSwipeDistance();var didCancel=didSwipeBackToCancel();if(!validTime||didCancel){nextPhase=PHASE_CANCEL;}
else if(validDistance&&currentPhase==PHASE_MOVE&&(!options.triggerOnTouchEnd||options.triggerOnTouchLeave)){nextPhase=PHASE_END;}
else if(!validDistance&&currentPhase==PHASE_END&&options.triggerOnTouchLeave){nextPhase=PHASE_CANCEL;}
return nextPhase;}
function triggerHandler(event,phase){var ret,touches=event.touches;if(didSwipe()||hasSwipes()){ret=triggerHandlerForGesture(event,phase,SWIPE);}
if((didPinch()||hasPinches())&&ret!==false){ret=triggerHandlerForGesture(event,phase,PINCH);}
if(didDoubleTap()&&ret!==false){ret=triggerHandlerForGesture(event,phase,DOUBLE_TAP);}
else if(didLongTap()&&ret!==false){ret=triggerHandlerForGesture(event,phase,LONG_TAP);}
else if(didTap()&&ret!==false){ret=triggerHandlerForGesture(event,phase,TAP);}
if(phase===PHASE_CANCEL){touchCancel(event);}
if(phase===PHASE_END){if(touches){if(!touches.length){touchCancel(event);}}else{touchCancel(event);}}
return ret;}
function triggerHandlerForGesture(event,phase,gesture){var ret;if(gesture==SWIPE){$element.trigger('swipeStatus',[phase,direction||null,distance||0,duration||0,fingerCount,fingerData,currentDirection]);if(options.swipeStatus){ret=options.swipeStatus.call($element,event,phase,direction||null,distance||0,duration||0,fingerCount,fingerData,currentDirection);if(ret===false)return false;}
if(phase==PHASE_END&&validateSwipe()){clearTimeout(singleTapTimeout);clearTimeout(holdTimeout);$element.trigger('swipe',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipe){ret=options.swipe.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);if(ret===false)return false;}
switch(direction){case LEFT:$element.trigger('swipeLeft',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipeLeft){ret=options.swipeLeft.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);}
break;case RIGHT:$element.trigger('swipeRight',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipeRight){ret=options.swipeRight.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);}
break;case UP:$element.trigger('swipeUp',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipeUp){ret=options.swipeUp.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);}
break;case DOWN:$element.trigger('swipeDown',[direction,distance,duration,fingerCount,fingerData,currentDirection]);if(options.swipeDown){ret=options.swipeDown.call($element,event,direction,distance,duration,fingerCount,fingerData,currentDirection);}
break;}}}
if(gesture==PINCH){$element.trigger('pinchStatus',[phase,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]);if(options.pinchStatus){ret=options.pinchStatus.call($element,event,phase,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData);if(ret===false)return false;}
if(phase==PHASE_END&&validatePinch()){switch(pinchDirection){case IN:$element.trigger('pinchIn',[pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]);if(options.pinchIn){ret=options.pinchIn.call($element,event,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData);}
break;case OUT:$element.trigger('pinchOut',[pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData]);if(options.pinchOut){ret=options.pinchOut.call($element,event,pinchDirection||null,pinchDistance||0,duration||0,fingerCount,pinchZoom,fingerData);}
break;}}}
if(gesture==TAP){if(phase===PHASE_CANCEL||phase===PHASE_END){clearTimeout(singleTapTimeout);clearTimeout(holdTimeout);if(hasDoubleTap()&&!inDoubleTap()){doubleTapStartTime=getTimeStamp();singleTapTimeout=setTimeout($.proxy(function(){doubleTapStartTime=null;$element.trigger('tap',[event.target]);if(options.tap){ret=options.tap.call($element,event,event.target);}},this),options.doubleTapThreshold);}else{doubleTapStartTime=null;$element.trigger('tap',[event.target]);if(options.tap){ret=options.tap.call($element,event,event.target);}}}}else if(gesture==DOUBLE_TAP){if(phase===PHASE_CANCEL||phase===PHASE_END){clearTimeout(singleTapTimeout);clearTimeout(holdTimeout);doubleTapStartTime=null;$element.trigger('doubletap',[event.target]);if(options.doubleTap){ret=options.doubleTap.call($element,event,event.target);}}}else if(gesture==LONG_TAP){if(phase===PHASE_CANCEL||phase===PHASE_END){clearTimeout(singleTapTimeout);doubleTapStartTime=null;$element.trigger('longtap',[event.target]);if(options.longTap){ret=options.longTap.call($element,event,event.target);}}}
return ret;}
function validateSwipeDistance(){var valid=true;if(options.threshold!==null){valid=distance>=options.threshold;}
return valid;}
function didSwipeBackToCancel(){var cancelled=false;if(options.cancelThreshold!==null&&direction!==null){cancelled=(getMaxDistance(direction)-distance)>=options.cancelThreshold;}
return cancelled;}
function validatePinchDistance(){if(options.pinchThreshold!==null){return pinchDistance>=options.pinchThreshold;}
return true;}
function validateSwipeTime(){var result;if(options.maxTimeThreshold){if(duration>=options.maxTimeThreshold){result=false;}else{result=true;}}else{result=true;}
return result;}
function validateDefaultEvent(jqEvent,direction){if(options.preventDefaultEvents===false){return;}
if(options.allowPageScroll===NONE){jqEvent.preventDefault();}else{var auto=options.allowPageScroll===AUTO;switch(direction){case LEFT:if((options.swipeLeft&&auto)||(!auto&&options.allowPageScroll!=HORIZONTAL)){jqEvent.preventDefault();}
break;case RIGHT:if((options.swipeRight&&auto)||(!auto&&options.allowPageScroll!=HORIZONTAL)){jqEvent.preventDefault();}
break;case UP:if((options.swipeUp&&auto)||(!auto&&options.allowPageScroll!=VERTICAL)){jqEvent.preventDefault();}
break;case DOWN:if((options.swipeDown&&auto)||(!auto&&options.allowPageScroll!=VERTICAL)){jqEvent.preventDefault();}
break;case NONE:break;}}}
function validatePinch(){var hasCorrectFingerCount=validateFingers();var hasEndPoint=validateEndPoint();var hasCorrectDistance=validatePinchDistance();return hasCorrectFingerCount&&hasEndPoint&&hasCorrectDistance;}
function hasPinches(){return!!(options.pinchStatus||options.pinchIn||options.pinchOut);}
function didPinch(){return!!(validatePinch()&&hasPinches());}
function validateSwipe(){var hasValidTime=validateSwipeTime();var hasValidDistance=validateSwipeDistance();var hasCorrectFingerCount=validateFingers();var hasEndPoint=validateEndPoint();var didCancel=didSwipeBackToCancel();var valid=!didCancel&&hasEndPoint&&hasCorrectFingerCount&&hasValidDistance&&hasValidTime;return valid;}
function hasSwipes(){return!!(options.swipe||options.swipeStatus||options.swipeLeft||options.swipeRight||options.swipeUp||options.swipeDown);}
function didSwipe(){return!!(validateSwipe()&&hasSwipes());}
function validateFingers(){return((fingerCount===options.fingers||options.fingers===ALL_FINGERS)||!SUPPORTS_TOUCH);}
function validateEndPoint(){return fingerData[0].end.x!==0;}
function hasTap(){return!!(options.tap);}
function hasDoubleTap(){return!!(options.doubleTap);}
function hasLongTap(){return!!(options.longTap);}
function validateDoubleTap(){if(doubleTapStartTime==null){return false;}
var now=getTimeStamp();return(hasDoubleTap()&&((now-doubleTapStartTime)<=options.doubleTapThreshold));}
function inDoubleTap(){return validateDoubleTap();}
function validateTap(){return((fingerCount===1||!SUPPORTS_TOUCH)&&(isNaN(distance)||distance<options.threshold));}
function validateLongTap(){return((duration>options.longTapThreshold)&&(distance<DOUBLE_TAP_THRESHOLD));}
function didTap(){return!!(validateTap()&&hasTap());}
function didDoubleTap(){return!!(validateDoubleTap()&&hasDoubleTap());}
function didLongTap(){return!!(validateLongTap()&&hasLongTap());}
function startMultiFingerRelease(event){previousTouchEndTime=getTimeStamp();fingerCountAtRelease=event.touches.length+1;}
function cancelMultiFingerRelease(){previousTouchEndTime=0;fingerCountAtRelease=0;}
function inMultiFingerRelease(){var withinThreshold=false;if(previousTouchEndTime){var diff=getTimeStamp()-previousTouchEndTime
if(diff<=options.fingerReleaseThreshold){withinThreshold=true;}}
return withinThreshold;}
function getTouchInProgress(){return!!($element.data(PLUGIN_NS+'_intouch')===true);}
function setTouchInProgress(val){if(!$element){return;}
if(val===true){$element.bind(MOVE_EV,touchMove);$element.bind(END_EV,touchEnd);if(LEAVE_EV){$element.bind(LEAVE_EV,touchLeave);}}else{$element.unbind(MOVE_EV,touchMove,false);$element.unbind(END_EV,touchEnd,false);if(LEAVE_EV){$element.unbind(LEAVE_EV,touchLeave,false);}}
$element.data(PLUGIN_NS+'_intouch',val===true);}
function createFingerData(id,evt){var f={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};f.start.x=f.last.x=f.end.x=evt.pageX||evt.clientX;f.start.y=f.last.y=f.end.y=evt.pageY||evt.clientY;fingerData[id]=f;return f;}
function updateFingerData(evt){var id=evt.identifier!==undefined?evt.identifier:0;var f=getFingerData(id);if(f===null){f=createFingerData(id,evt);}
f.last.x=f.end.x;f.last.y=f.end.y;f.end.x=evt.pageX||evt.clientX;f.end.y=evt.pageY||evt.clientY;return f;}
function getFingerData(id){return fingerData[id]||null;}
function setMaxDistance(direction,distance){if(direction==NONE)return;distance=Math.max(distance,getMaxDistance(direction));maximumsMap[direction].distance=distance;}
function getMaxDistance(direction){if(maximumsMap[direction])return maximumsMap[direction].distance;return undefined;}
function createMaximumsData(){var maxData={};maxData[LEFT]=createMaximumVO(LEFT);maxData[RIGHT]=createMaximumVO(RIGHT);maxData[UP]=createMaximumVO(UP);maxData[DOWN]=createMaximumVO(DOWN);return maxData;}
function createMaximumVO(dir){return{direction:dir,distance:0}}
function calculateDuration(){return endTime-startTime;}
function calculateTouchesDistance(startPoint,endPoint){var diffX=Math.abs(startPoint.x-endPoint.x);var diffY=Math.abs(startPoint.y-endPoint.y);return Math.round(Math.sqrt(diffX*diffX+diffY*diffY));}
function calculatePinchZoom(startDistance,endDistance){var percent=(endDistance/startDistance)*1;return percent.toFixed(2);}
function calculatePinchDirection(){if(pinchZoom<1){return OUT;}else{return IN;}}
function calculateDistance(startPoint,endPoint){return Math.round(Math.sqrt(Math.pow(endPoint.x-startPoint.x,2)+Math.pow(endPoint.y-startPoint.y,2)));}
function calculateAngle(startPoint,endPoint){var x=startPoint.x-endPoint.x;var y=endPoint.y-startPoint.y;var r=Math.atan2(y,x);var angle=Math.round(r*180/Math.PI);if(angle<0){angle=360-Math.abs(angle);}
return angle;}
function calculateDirection(startPoint,endPoint){if(comparePoints(startPoint,endPoint)){return NONE;}
var angle=calculateAngle(startPoint,endPoint);if((angle<=45)&&(angle>=0)){return LEFT;}else if((angle<=360)&&(angle>=315)){return LEFT;}else if((angle>=135)&&(angle<=225)){return RIGHT;}else if((angle>45)&&(angle<135)){return DOWN;}else{return UP;}}
function getTimeStamp(){var now=new Date();return now.getTime();}
function getbounds(el){el=$(el);var offset=el.offset();var bounds={left:offset.left,right:offset.left+el.outerWidth(),top:offset.top,bottom:offset.top+el.outerHeight()}
return bounds;}
function isInBounds(point,bounds){return(point.x>bounds.left&&point.x<bounds.right&&point.y>bounds.top&&point.y<bounds.bottom);};function comparePoints(pointA,pointB){return(pointA.x==pointB.x&&pointA.y==pointB.y);}}}));;

/* /web/static/tests/legacy/fields/basic_fields_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web.basic_fields_mobile_tests',function(require){"use strict";var FormView=require('web.FormView');var ListView=require('web.ListView');var testUtils=require('web.test_utils');var createView=testUtils.createView;QUnit.module('fields',{},function(){QUnit.module('basic_fields',{beforeEach:function(){this.data={partner:{fields:{date:{string:"A date",type:"date",searchable:true},datetime:{string:"A datetime",type:"datetime",searchable:true},display_name:{string:"Displayed name",type:"char",searchable:true},foo:{string:"Foo",type:"char",default:"My little Foo Value",searchable:true,trim:true},bar:{string:"Bar",type:"boolean",default:true,searchable:true},int_field:{string:"int_field",type:"integer",sortable:true,searchable:true},qux:{string:"Qux",type:"float",digits:[16,1],searchable:true},},records:[{id:1,date:"2017-02-03",datetime:"2017-02-08 10:00:00",display_name:"first record",bar:true,foo:"yop",int_field:10,qux:0.44444,},{id:2,display_name:"second record",bar:true,foo:"blip",int_field:0,qux:0,},{id:4,display_name:"aaa",foo:"abc",int_field:false,qux:false,}],onchanges:{},},};}},function(){QUnit.module('PhoneWidget');QUnit.test('phone field in form view on extra small screens',async function(assert){assert.expect(7);var form=await createView({View:FormView,model:'partner',data:this.data,arch:'<form string="Partners">'+'<sheet>'+'<group>'+'<field name="foo" widget="phone"/>'+'</group>'+'</sheet>'+'</form>',res_id:1,});var $phoneLink=form.$('div.o_form_uri.o_field_widget.o_field_phone > a');assert.strictEqual($phoneLink.length,1,"should have a anchor with correct classes");assert.strictEqual($phoneLink.text(),'yop',"value should be displayed properly");assert.hasAttrValue($phoneLink,'href','tel:yop',"should have proper tel prefix");await testUtils.form.clickEdit(form);assert.containsOnce(form,'input[type="text"].o_field_widget',"should have an int for the phone field");assert.strictEqual(form.$('input[type="text"].o_field_widget').val(),'yop',"input should contain field value in edit mode");await testUtils.fields.editInput(form.$('input[type="text"].o_field_widget'),'new');await testUtils.form.clickSave(form);$phoneLink=form.$('div.o_form_uri.o_field_widget.o_field_phone > a');assert.strictEqual($phoneLink.text(),'new',"new value should be displayed properly");assert.hasAttrValue($phoneLink,'href','tel:new',"should still have proper tel prefix");form.destroy();});QUnit.test('phone field in editable list view on extra small screens',async function(assert){assert.expect(10);var list=await createView({View:ListView,model:'partner',data:this.data,arch:'<tree editable="bottom"><field name="foo" widget="phone"/></tree>',});assert.containsN(list,'.o_data_row',3,"should have 3 record");assert.strictEqual(list.$('tbody td:not(.o_list_record_selector) a').first().text(),'yop',"value should be displayed properly");var $phoneLink=list.$('div.o_form_uri.o_field_widget.o_field_phone > a');assert.strictEqual($phoneLink.length,3,"should have anchors with correct classes");assert.hasAttrValue($phoneLink.first(),'href','tel:yop',"should have proper tel prefix");var $cell=list.$('tbody td:not(.o_list_record_selector)').first();await testUtils.dom.click($cell);assert.hasClass($cell.parent(),'o_selected_row','should be set as edit mode');assert.strictEqual($cell.find('input').val(),'yop','should have the corect value in internal input');await testUtils.fields.editInput($cell.find('input'),'new');await testUtils.dom.click(list.$buttons.find('.o_list_button_save'));$cell=list.$('tbody td:not(.o_list_record_selector)').first();assert.doesNotHaveClass($cell.parent(),'o_selected_row','should not be in edit mode anymore');assert.strictEqual(list.$('tbody td:not(.o_list_record_selector) a').first().text(),'new',"value should be properly updated");$phoneLink=list.$('div.o_form_uri.o_field_widget.o_field_phone > a');assert.strictEqual($phoneLink.length,3,"should still have anchors with correct classes");assert.hasAttrValue($phoneLink.first(),'href','tel:new',"should still have proper tel prefix");list.destroy();});QUnit.test('phone field does not allow html injections',async function(assert){assert.expect(1);var form=await createView({View:FormView,model:'partner',data:this.data,arch:'<form string="Partners">'+'<sheet>'+'<group>'+'<field name="foo" widget="phone"/>'+'</group>'+'</sheet>'+'</form>',res_id:1,viewOptions:{mode:'edit',},});var val='<script>throw Error();</script><script>throw Error();</script>';await testUtils.fields.editInput(form.$('input.o_field_widget[name="foo"]'),val);await testUtils.form.clickSave(form);assert.strictEqual(form.$('.o_field_widget').text(),val,"value should have been correctly escaped");form.destroy();});QUnit.module('FieldDateRange');QUnit.test('date field: toggle daterangepicker then scroll',async function(assert){assert.expect(4);const scrollEvent=new UIEvent('scroll');function scrollAtHeight(height){window.scrollTo(0,height);document.dispatchEvent(scrollEvent);}
this.data.partner.fields.date_end={string:'Date End',type:'date'};var form=await createView({View:FormView,model:'partner',data:this.data,arch:'<form>'+'<field name="date" widget="daterange" options="{\'related_end_date\': \'date_end\'}"/>'+'<field name="date_end" widget="daterange" options="{\'related_start_date\': \'date\'}"/>'+'</form>',session:{getTZOffset:function(){return 330;},},});assert.containsN(document.body,'.daterangepicker',2,"should initialize 2 date range picker");await testUtils.dom.click("input[name=date]");assert.isVisible($('.daterangepicker:first'),"date range picker should be opened");scrollAtHeight(50);assert.isVisible($('.daterangepicker:first'),"date range picker should be opened");await testUtils.dom.click($('.daterangepicker:first .cancelBtn'));assert.isNotVisible($('.daterangepicker:first'),"date range picker should be closed");form.destroy();});});});});;

/* /web/static/tests/legacy/fields/relational_fields_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define("web.relational_fields_mobile_tests",function(require){"use strict";const FormView=require("web.FormView");const testUtils=require("web.test_utils");QUnit.module("fields",{},function(){QUnit.module("relational_fields",{beforeEach(){this.data={partner:{fields:{display_name:{string:"Displayed name",type:"char"},p:{string:"one2many field",type:"one2many",relation:"partner",relation_field:"trululu"},trululu:{string:"Trululu",type:"many2one",relation:"partner"},},records:[{id:1,display_name:"first record",p:[2,4],trululu:4,},{id:2,display_name:"second record",p:[],trululu:1,},{id:4,display_name:"aaa",}],},};},},function(){QUnit.module("FieldOne2Many");QUnit.test("one2many on mobile: display list if present without kanban view",async function(assert){assert.expect(2);const form=await testUtils.createView({View:FormView,model:"partner",data:this.data,arch:`
                    <form>
                        <field name="p">
                            <tree>
                                <field name="display_name"/>
                            </tree>
                        </field>
                    </form>
                `,res_id:1,});await testUtils.form.clickEdit(form);assert.containsOnce(form,".o_field_x2many_list","should display one2many's list");assert.containsN(form,".o_field_x2many_list .o_data_row",2,"should display 2 records in one2many's list");form.destroy();});});});});;

/* /web/static/tests/legacy/components/dropdown_menu_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web.dropdown_menu_mobile_tests',function(require){"use strict";const DropdownMenu=require('web.DropdownMenu');const testUtils=require('web.test_utils');const{createComponent}=testUtils;QUnit.module('Components',{before:function(){this.items=[{isActive:false,description:'Some Item',id:1,groupId:1,groupNumber:1,options:[{description:"First Option",groupNumber:1,id:1},{description:"Second Option",groupNumber:2,id:2},],},{isActive:true,description:'Some other Item',id:2,groupId:2,groupNumber:2,},];},},function(){QUnit.module('DropdownMenu');QUnit.test('display dropdown at the right position',async function(assert){assert.expect(2);const viewPort=testUtils.prepareTarget();viewPort.style.position='initial';const dropdown=await createComponent(DropdownMenu,{env:{device:{isMobile:true},},props:{items:this.items,title:"Dropdown",},});await testUtils.dom.click(dropdown.el.querySelector('button'));assert.containsOnce(dropdown.el,'.dropdown-menu-left',"should display the dropdown menu at the right screen");await testUtils.dom.click(dropdown.el.querySelector('button'));dropdown.el.parentNode.classList.add('clearfix');dropdown.el.classList.add('float-right');await testUtils.dom.click(dropdown.el.querySelector('button'));assert.containsOnce(dropdown.el,'.dropdown-menu-right',"should display the dropdown menu at the left screen");dropdown.el.parentNode.classList.remove('clearfix');dropdown.destroy();viewPort.style.position='';});});});;

/* /mail/static/src/components/discuss_mobile_mailbox_selection/mobile_tests/discuss_mobile_mailbox_selection_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('@mail/components/discuss_mobile_mailbox_selection/mobile_tests/discuss_mobile_mailbox_selection_tests',async function(require){'use strict';let __exports={};const{afterEach,afterNextRender,beforeEach,start,}=require('@mail/utils/test_utils');QUnit.module('mail',{},function(){QUnit.module('components',{},function(){QUnit.module('discuss_mobile_mailbox_selection',{},function(){QUnit.module('discuss_mobile_mailbox_selection_tests.js',{beforeEach(){beforeEach(this);this.start=async params=>{const{env,widget}=await start(Object.assign({autoOpenDiscuss:true,data:this.data,env:{browser:{innerHeight:640,innerWidth:360,},device:{isMobile:true,},},hasDiscuss:true,},params,));this.env=env;this.widget=widget;};},afterEach(){afterEach(this);},});QUnit.test('select another mailbox',async function(assert){assert.expect(7);await this.start();assert.containsOnce(document.body,'.o_Discuss',"should display discuss initially");assert.hasClass(document.querySelector('.o_Discuss'),'o-mobile',"discuss should be opened in mobile mode");assert.containsOnce(document.body,'.o_Discuss_thread',"discuss should display a thread initially");assert.strictEqual(document.querySelector('.o_Discuss_thread').dataset.threadLocalId,this.messaging.inbox.localId,"inbox mailbox should be opened initially");assert.containsOnce(document.body,`.o_DiscussMobileMailboxSelection_button[
            data-mailbox-local-id="${this.messaging.starred.localId}"
        ]`,"should have a button to open starred mailbox");await afterNextRender(()=>document.querySelector(`.o_DiscussMobileMailboxSelection_button[
            data-mailbox-local-id="${this.messaging.starred.localId}"]
        `).click());assert.containsOnce(document.body,'.o_Discuss_thread',"discuss should still have a thread after clicking on starred mailbox");assert.strictEqual(document.querySelector('.o_Discuss_thread').dataset.threadLocalId,this.messaging.starred.localId,"starred mailbox should be opened after clicking on it");});QUnit.test('auto-select "Inbox" when discuss had channel as active thread',async function(assert){assert.expect(3);this.data['mail.channel'].records.push({id:20});await this.start({discuss:{context:{active_id:20,},}});assert.hasClass(document.querySelector('.o_MobileMessagingNavbar_tab[data-tab-id="channel"]'),'o-active',"'channel' tab should be active initially when loading discuss with channel id as active_id");await afterNextRender(()=>document.querySelector('.o_MobileMessagingNavbar_tab[data-tab-id="mailbox"]').click());assert.hasClass(document.querySelector('.o_MobileMessagingNavbar_tab[data-tab-id="mailbox"]'),'o-active',"'mailbox' tab should be selected after click on mailbox tab");assert.hasClass(document.querySelector(`.o_DiscussMobileMailboxSelection_button[data-mailbox-local-id="${
            this.messaging.inbox.localId
        }"]`),'o-active',"'Inbox' mailbox should be auto-selected after click on mailbox tab");});});});});return __exports;});;

/* /barcodes/static/tests/barcode_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('barcodes.barcode_mobile_tests',function(){"use strict";QUnit.module('Barcodes',{},function(){QUnit.module('Barcodes Mobile');QUnit.test('barcode field automatically focus behavior',function(assert){assert.expect(10);var barcodeEvents=odoo.__DEBUG__.services["barcodes.BarcodeEvents"].BarcodeEvents;var __isChromeMobile=barcodeEvents.isChromeMobile;barcodeEvents.isChromeMobile=true;barcodeEvents.stop();barcodeEvents.start();var $form=$('<form>'+'<input name="email" type="email"/>'+'<input name="number" type="number"/>'+'<input name="password" type="password"/>'+'<input name="tel" type="tel"/>'+'<input name="text"/>'+'<input name="explicit_text" type="text"/>'+'<textarea></textarea>'+'<div contenteditable="true"></div>'+'<select name="select">'+'<option value="option1">Option 1</option>'+'<option value="option2">Option 2</option>'+'</select>'+'</form>');$('#qunit-fixture').append($form);$('body').keydown();assert.strictEqual(document.activeElement.name,'barcode',"hidden barcode input should have the focus");var $element=$form.find('select');$element.focus().keydown();assert.strictEqual(document.activeElement.name,'barcode',"hidden barcode input should have the focus");var keepFocusedElements=['email','number','password','tel','text','explicit_text'];for(var i=0;i<keepFocusedElements.length;++i){$element=$form.find('input[name='+keepFocusedElements[i]+']');$element.focus().keydown();assert.strictEqual(document.activeElement,$element[0],"input "+keepFocusedElements[i]+" should keep focus");}
$element=$form.find('textarea');$element.focus().keydown();assert.strictEqual(document.activeElement,$element[0],"textarea should keep focus");$element=$form.find('[contenteditable=true]');$element.focus().keydown();assert.strictEqual(document.activeElement,$element[0],"contenteditable should keep focus");$('#qunit-fixture').empty();barcodeEvents.isChromeMobile=__isChromeMobile;barcodeEvents.stop();barcodeEvents.start();document.querySelector('input[name=barcode]').remove();});});});;

/* /web_enterprise/static/tests/mobile/burger_menu_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('@web_enterprise/../tests/mobile/burger_menu_tests',async function(require){'use strict';let __exports={};const{click,legacyExtraNextTick}=require("@web/../tests/helpers/utils");const{doAction,getActionManagerServerData}=require("@web/../tests/webclient/helpers");const{registry}=require("@web/core/registry");const{createEnterpriseWebClient}=require("@web_enterprise/../tests/helpers");const{BurgerMenu}=require("@web_enterprise/webclient/burger_menu/burger_menu");const{homeMenuService}=require("@web_enterprise/webclient/home_menu/home_menu_service");const{companyService}=require("@web/webclient/company_service");const{makeFakeEnterpriseService}=require("@web_enterprise/../tests/mocks");let serverData;const serviceRegistry=registry.category("services");QUnit.module("Burger Menu",{beforeEach(){serverData=getActionManagerServerData();serviceRegistry.add("enterprise",makeFakeEnterpriseService());serviceRegistry.add("company",companyService);serviceRegistry.add("home_menu",homeMenuService);registry.category("systray").add("burgerMenu",{Component:BurgerMenu,isDisplayed:(env)=>env.isSmall,});},});QUnit.test("Burger menu can be opened and closed",async(assert)=>{assert.expect(2);const wc=await createEnterpriseWebClient({serverData});await click(wc.el,".o_mobile_menu_toggle");assert.containsOnce(wc,".o_burger_menu");await click(wc.el,".o_burger_menu_close");assert.containsNone(wc,".o_burger_menu");});QUnit.test("Burger Menu on home menu",async(assert)=>{assert.expect(7);const wc=await createEnterpriseWebClient({serverData});assert.containsNone(wc,".o_burger_menu");assert.isVisible(wc.el.querySelector(".o_home_menu"));await click(wc.el,".o_mobile_menu_toggle");assert.containsOnce(wc,".o_burger_menu");assert.containsOnce(wc,".o_user_menu_mobile");assert.containsOnce(wc,".o_burger_menu_user");assert.containsNone(wc,".o_burger_menu_app");await click(wc.el,".o_burger_menu_close");assert.containsNone(wc,".o_burger_menu");});QUnit.test("Burger Menu on an App",async(assert)=>{assert.expect(8);serverData.menus[1].children=[99];serverData.menus[99]={id:99,children:[],name:"SubMenu",appID:1,actionID:1002,xmlid:"",webIconData:undefined,webIcon:false,};const wc=await createEnterpriseWebClient({serverData});await click(wc.el,".o_app:first-of-type");await legacyExtraNextTick();assert.containsNone(wc,".o_burger_menu");assert.isNotVisible(wc.el.querySelector(".o_home_menu"));await click(wc.el,".o_mobile_menu_toggle");assert.containsOnce(wc,".o_burger_menu");assert.containsOnce(wc,".o_burger_menu .o_burger_menu_app .o_menu_sections .dropdown-item");assert.strictEqual(wc.el.querySelector(".o_burger_menu .o_burger_menu_app .o_menu_sections .dropdown-item").textContent,"SubMenu");assert.hasClass(wc.el.querySelector(".o_burger_menu_content"),"o_burger_menu_dark");await click(wc.el,".o_burger_menu_topbar");assert.doesNotHaveClass(wc.el.querySelector(".o_burger_menu_content"),"o_burger_menu_dark");await click(wc.el,".o_burger_menu_topbar");assert.hasClass(wc.el.querySelector(".o_burger_menu_content"),"o_burger_menu_dark");});QUnit.test("Burger Menu on an App without SubMenu",async(assert)=>{assert.expect(6);const wc=await createEnterpriseWebClient({serverData});await click(wc.el,".o_app:first-of-type");await legacyExtraNextTick();assert.containsNone(wc,".o_burger_menu");await click(wc.el,".o_mobile_menu_toggle");assert.containsOnce(wc,".o_burger_menu");assert.containsOnce(wc,".o_user_menu_mobile");assert.containsOnce(wc,".o_burger_menu_user");assert.containsNone(wc,".o_burger_menu_app");await click(wc.el,".o_burger_menu_close");assert.containsNone(wc,".o_burger_menu");});QUnit.test("Burger menu closes when an action is requested",async(assert)=>{assert.expect(3);const wc=await createEnterpriseWebClient({serverData});await click(wc.el,".o_mobile_menu_toggle");assert.containsOnce(wc,".o_burger_menu");await doAction(wc,1);await legacyExtraNextTick();assert.containsNone(wc,".o_burger_menu");assert.containsOnce(wc,".o_kanban_view");});return __exports;});;

/* /web_enterprise/static/tests/mobile/control_panel_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('@web_enterprise/../tests/mobile/control_panel_tests',async function(require){'use strict';let __exports={};const{click}=require("@web/../tests/helpers/utils");const{makeWithSearch,setupControlPanelServiceRegistry}=require("@web/../tests/search/helpers");const{registry}=require("@web/core/registry");const{uiService}=require("@web/core/ui/ui_service");const{ControlPanel}=require("@web/search/control_panel/control_panel");let serverData;QUnit.module("Search",(hooks)=>{hooks.beforeEach(async()=>{setupControlPanelServiceRegistry();registry.category("services").add("ui",uiService);serverData={models:{foo:{fields:{birthday:{string:"Birthday",type:"date",store:true,sortable:true},date_field:{string:"Date",type:"date",store:true,sortable:true},},},},views:{"foo,false,search":`
                    <search>
                        <filter name="birthday" date="birthday"/>
                        <filter name="date_field" date="date_field"/>
                    </search>
                `,},};});QUnit.module("Control Panel (mobile)");QUnit.test("Display control panel mobile",async(assert)=>{const controlPanel=await makeWithSearch({serverData,resModel:"foo",Component:ControlPanel,searchMenuTypes:["filter"],searchViewId:false,});assert.containsOnce(controlPanel.el,".breadcrumb");assert.containsOnce(controlPanel.el,".o_enable_searchview");assert.containsNone(controlPanel.el,".o_searchview");assert.containsNone(controlPanel.el,".o_toggle_searchview_full");await click(controlPanel.el,".o_enable_searchview");assert.containsNone(controlPanel.el,".breadcrumb");assert.containsOnce(controlPanel.el,".o_enable_searchview");assert.containsOnce(controlPanel.el,".o_searchview");assert.containsOnce(controlPanel.el,".o_toggle_searchview_full");await click(controlPanel.el,".o_toggle_searchview_full");assert.containsOnce(controlPanel.el,"portal");assert.containsOnce(document.body,".o_searchview.o_mobile_search");assert.containsN(document.body,".o_mobile_search .o_mobile_search_button",2);assert.strictEqual(document.body.querySelector(".o_mobile_search_header").textContent.trim(),"FILTER CLEAR");assert.containsOnce(document.body,".o_searchview.o_mobile_search .o_cp_searchview");assert.containsOnce(document.body,".o_searchview.o_mobile_search .o_mobile_search_footer");await click(document.body.querySelector(".o_mobile_search_button"));assert.containsNone(controlPanel.el,".breadcrumb");assert.containsOnce(controlPanel.el,".o_enable_searchview");assert.containsOnce(controlPanel.el,".o_searchview");assert.containsOnce(controlPanel.el,".o_toggle_searchview_full");await click(controlPanel.el,".o_enable_searchview");assert.containsOnce(controlPanel.el,".breadcrumb");assert.containsOnce(controlPanel.el,".o_enable_searchview");assert.containsNone(controlPanel.el,".o_searchview");assert.containsNone(controlPanel.el,".o_toggle_searchview_full");});});return __exports;});;

/* /web_enterprise/static/tests/mobile/mobile_switch_company_menu_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('@web_enterprise/../tests/mobile/mobile_switch_company_menu_tests',async function(require){'use strict';let __exports={};const{browser}=require("@web/core/browser/browser");const{registry}=require("@web/core/registry");const{hotkeyService}=require("@web/core/hotkeys/hotkey_service");const{registerCleanup}=require("@web/../tests/helpers/cleanup");const{makeTestEnv}=require("@web/../tests/helpers/mock_env");const{click,getFixture,makeDeferred,patchWithCleanup}=require("@web/../tests/helpers/utils");const{MobileSwitchCompanyMenu}=require("@web_enterprise/webclient/burger_menu/mobile_switch_company_menu/mobile_switch_company_menu");const{companyService}=require("@web/webclient/company_service");const{uiService}=require("@web/core/ui/ui_service");const{session}=require("@web/session");const{mount}=owl;const serviceRegistry=registry.category("services");const ORIGINAL_TOGGLE_DELAY=MobileSwitchCompanyMenu.toggleDelay;async function createSwitchCompanyMenu(routerParams={},toggleDelay=0){patchWithCleanup(MobileSwitchCompanyMenu,{toggleDelay});if(routerParams.onPushState){const pushState=browser.history.pushState;patchWithCleanup(browser,{history:Object.assign({},browser.history,{pushState(state,title,url){pushState(...arguments);if(routerParams.onPushState){routerParams.onPushState(url);}},}),});}
const env=await makeTestEnv();const target=getFixture();const scMenu=await mount(MobileSwitchCompanyMenu,{env,target});registerCleanup(()=>scMenu.destroy());return scMenu;}
QUnit.module("MobileMobileSwitchCompanyMenu",(hooks)=>{hooks.beforeEach(()=>{patchWithCleanup(session.user_companies,{allowed_companies:{1:{id:1,name:"Hermit"},2:{id:2,name:"Herman's"},3:{id:3,name:"Heroes TM"},},current_company:1,});serviceRegistry.add("ui",uiService);serviceRegistry.add("company",companyService);serviceRegistry.add("hotkey",hotkeyService);});QUnit.test("basic rendering",async(assert)=>{assert.expect(13);const scMenu=await createSwitchCompanyMenu();assert.strictEqual(scMenu.el.tagName.toUpperCase(),"DIV");assert.hasClass(scMenu.el,"o_burger_menu_companies");assert.containsN(scMenu,".toggle_company",3);assert.containsN(scMenu,".log_into",3);assert.containsOnce(scMenu.el,".fa-check-square");assert.containsN(scMenu.el,".fa-square-o",2);assert.strictEqual(scMenu.el.querySelectorAll(".menu_companies_item")[0].textContent,"Hermit(current)");assert.strictEqual(scMenu.el.querySelectorAll(".menu_companies_item")[1].textContent,"Herman's");assert.strictEqual(scMenu.el.querySelectorAll(".menu_companies_item")[2].textContent,"Heroes TM");assert.hasClass(scMenu.el.querySelectorAll(".menu_companies_item i")[0],"fa-check-square");assert.hasClass(scMenu.el.querySelectorAll(".menu_companies_item i")[1],"fa-square-o");assert.hasClass(scMenu.el.querySelectorAll(".menu_companies_item i")[2],"fa-square-o");assert.strictEqual(scMenu.el.textContent,"CompaniesHermit(current)Herman'sHeroes TM");});QUnit.test("companies can be toggled: toggle a second company",async(assert)=>{assert.expect(9);const prom=makeDeferred();function onPushState(url){assert.step(url.split("#")[1]);prom.resolve();}
const scMenu=await createSwitchCompanyMenu({onPushState});assert.deepEqual(scMenu.env.services.company.allowedCompanyIds,[1]);assert.strictEqual(scMenu.env.services.company.currentCompany.id,1);assert.containsN(scMenu.el,"[data-company-id]",3);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",1);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",2);await click(scMenu.el.querySelectorAll(".toggle_company")[1]);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",2);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",1);await prom;assert.verifySteps(["cids=1%2C2"]);});QUnit.test("can toggle multiple companies at once",async(assert)=>{assert.expect(10);const prom=makeDeferred();function onPushState(url){assert.step(url.split("#")[1]);prom.resolve();}
const scMenu=await createSwitchCompanyMenu({onPushState},ORIGINAL_TOGGLE_DELAY);assert.deepEqual(scMenu.env.services.company.allowedCompanyIds,[1]);assert.strictEqual(scMenu.env.services.company.currentCompany.id,1);assert.containsN(scMenu.el,"[data-company-id]",3);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",1);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",2);await click(scMenu.el.querySelectorAll(".toggle_company")[0]);await click(scMenu.el.querySelectorAll(".toggle_company")[1]);await click(scMenu.el.querySelectorAll(".toggle_company")[2]);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",2);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",1);assert.verifySteps([]);await prom;assert.verifySteps(["cids=2%2C3"]);});QUnit.test("single company selected: toggling it off will keep it",async(assert)=>{assert.expect(11);patchWithCleanup(browser,{setTimeout(fn){return fn();},});const scMenu=await createSwitchCompanyMenu();assert.deepEqual(scMenu.env.services.router.current.hash,{cids:1});assert.deepEqual(scMenu.env.services.company.allowedCompanyIds,[1]);assert.strictEqual(scMenu.env.services.company.currentCompany.id,1);assert.containsN(scMenu.el,"[data-company-id]",3);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",1);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",2);await click(scMenu.el.querySelectorAll(".toggle_company")[0]);assert.deepEqual(scMenu.env.services.router.current.hash,{cids:1});assert.deepEqual(scMenu.env.services.company.allowedCompanyIds,[1]);assert.strictEqual(scMenu.env.services.company.currentCompany.id,1);assert.containsN(scMenu.el,"[data-company-id] .fa-check-squarqe",0);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",3);});QUnit.test("single company mode: companies can be logged in",async(assert)=>{assert.expect(7);function onPushState(url){assert.step(url.split("#")[1]);}
const scMenu=await createSwitchCompanyMenu({onPushState});assert.deepEqual(scMenu.env.services.company.allowedCompanyIds,[1]);assert.strictEqual(scMenu.env.services.company.currentCompany.id,1);assert.containsN(scMenu.el,"[data-company-id]",3);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",1);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",2);await click(scMenu.el.querySelectorAll(".log_into")[1]);assert.verifySteps(["cids=2"]);});QUnit.test("multi company mode: log into a non selected company",async(assert)=>{assert.expect(7);function onPushState(url){assert.step(url.split("#")[1]);}
Object.assign(browser.location,{hash:"cids=3%2C1"});const scMenu=await createSwitchCompanyMenu({onPushState});assert.deepEqual(scMenu.env.services.company.allowedCompanyIds,[3,1]);assert.strictEqual(scMenu.env.services.company.currentCompany.id,3);assert.containsN(scMenu.el,"[data-company-id]",3);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",2);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",1);await click(scMenu.el.querySelectorAll(".log_into")[1]);assert.verifySteps(["cids=2%2C3%2C1"]);});QUnit.test("multi company mode: log into an already selected company",async(assert)=>{assert.expect(7);function onPushState(url){assert.step(url.split("#")[1]);}
Object.assign(browser.location,{hash:"cids=2%2C3"});const scMenu=await createSwitchCompanyMenu({onPushState});assert.deepEqual(scMenu.env.services.company.allowedCompanyIds,[2,3]);assert.strictEqual(scMenu.env.services.company.currentCompany.id,2);assert.containsN(scMenu.el,"[data-company-id]",3);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",2);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",1);await click(scMenu.el.querySelectorAll(".log_into")[2]);assert.verifySteps(["cids=3%2C2"]);});QUnit.test("companies can be logged in even if some toggled within delay",async(assert)=>{assert.expect(7);function onPushState(url){assert.step(url.split("#")[1]);}
const scMenu=await createSwitchCompanyMenu({onPushState},ORIGINAL_TOGGLE_DELAY);assert.deepEqual(scMenu.env.services.company.allowedCompanyIds,[1]);assert.strictEqual(scMenu.env.services.company.currentCompany.id,1);assert.containsN(scMenu.el,"[data-company-id]",3);assert.containsN(scMenu.el,"[data-company-id] .fa-check-square",1);assert.containsN(scMenu.el,"[data-company-id] .fa-square-o",2);await click(scMenu.el.querySelectorAll(".toggle_company")[2]);await click(scMenu.el.querySelectorAll(".toggle_company")[0]);await click(scMenu.el.querySelectorAll(".log_into")[1]);assert.verifySteps(["cids=2"]);});});return __exports;});;

/* /web_enterprise/static/tests/mobile/webclient_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('@web_enterprise/../tests/mobile/webclient_mobile_tests',async function(require){'use strict';let __exports={};const{getActionManagerServerData,doAction}=require("@web/../tests/webclient/helpers");const{homeMenuService}=require("@web_enterprise/webclient/home_menu/home_menu_service");const{makeFakeEnterpriseService}=require("@web_enterprise/../tests/mocks");const{registry}=require("@web/core/registry");const{createEnterpriseWebClient}=require("@web_enterprise/../tests/helpers");const{click,legacyExtraNextTick,getFixture}=require("@web/../tests/helpers/utils");const serviceRegistry=registry.category("services");QUnit.module("WebClient Mobile",(hooks)=>{let serverData;hooks.beforeEach(()=>{serverData=getActionManagerServerData();serviceRegistry.add("home_menu",homeMenuService);const fakeEnterpriseService=makeFakeEnterpriseService();serviceRegistry.add("enterprise",fakeEnterpriseService);});QUnit.test("scroll position is kept",async(assert)=>{assert.expect(6);const record=serverData.models.partner.records[0];serverData.models.partner.records=[];for(let i=0;i<80;i++){const rec=Object.assign({},record);rec.id=i+1;rec.display_name=`Record ${rec.id}`;serverData.models.partner.records.push(rec);}
const target=getFixture();target.style.position="initial";const webClient=await createEnterpriseWebClient({serverData,target});await doAction(webClient,3);assert.containsOnce(webClient,".o_kanban_view");window.scrollTo(0,123);await click(webClient.el.querySelectorAll(".o_kanban_record")[20]);await legacyExtraNextTick();assert.containsOnce(webClient,".o_form_view");assert.containsNone(webClient,".o_kanban_view");window.scrollTo(0,0);await click(webClient.el.querySelector(".o_control_panel .o_back_button"));await legacyExtraNextTick();assert.containsNone(webClient,".o_form_view");assert.containsOnce(webClient,".o_kanban_view");assert.strictEqual(document.firstElementChild.scrollTop,123);});});return __exports;});;

/* /web_enterprise/static/tests/legacy/action_manager_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('@web_enterprise/../tests/legacy/action_manager_mobile_tests',async function(require){'use strict';let __exports={};const{createWebClient,doAction,getActionManagerServerData,loadState}=require("@web/../tests/webclient/helpers");const{click,legacyExtraNextTick}=require("@web/../tests/helpers/utils");const{loadJS}=owl.utils;let serverData;QUnit.module('ActionManager',{beforeEach(){serverData=getActionManagerServerData();Object.assign(serverData,{actions:{1:{id:1,name:'Partners Action 1',res_model:'partner',type:'ir.actions.act_window',views:[[false,'list'],[false,'kanban'],[false,'form']],},2:{id:2,name:'Partners Action 2',res_model:'partner',type:'ir.actions.act_window',views:[[false,'list'],[false,'form']],},},views:{'partner,false,kanban':`
                <kanban>
                    <templates>
                        <t t-name="kanban-box">
                            <div class="oe_kanban_global_click">
                                <field name="foo"/>
                            </div>
                        </t>
                    </templates>
                </kanban>`,'partner,false,list':'<tree><field name="foo"/></tree>','partner,false,form':`<form>
                    <group>
                        <field name="display_name"/>
                    </group>
                </form>`,'partner,false,search':'<search><field name="foo" string="Foo"/></search>',},models:{partner:{fields:{foo:{string:"Foo",type:"char"},},records:[{id:1,display_name:"First record",foo:"yop"},],},},});},});QUnit.test('uses a mobile-friendly view by default (if possible)',async function(assert){assert.expect(4);const webClient=await createWebClient({serverData});await doAction(webClient,1);assert.containsNone(webClient,'.o_list_view');assert.containsOnce(webClient,'.o_kanban_view');await doAction(webClient,2);assert.containsOnce(webClient,'.o_list_view');assert.containsNone(webClient,'.o_kanban_view');});QUnit.test('lazy load mobile-friendly view',async function(assert){assert.expect(12);const mockRPC=(route,args)=>{assert.step(args.method||route);};const webClient=await createWebClient({serverData,mockRPC});await loadState(webClient,{action:1,view_type:'form',});assert.containsNone(webClient,'.o_list_view');assert.containsNone(webClient,'.o_kanban_view');assert.containsOnce(webClient,'.o_form_view');await loadJS("/web/static/lib/jquery.touchSwipe/jquery.touchSwipe.js");await click(webClient.el,'.o_control_panel .breadcrumb .o_back_button');await legacyExtraNextTick();assert.containsNone(webClient,'.o_form_view');assert.containsNone(webClient,'.o_list_view');assert.containsOnce(webClient,'.o_kanban_view');assert.verifySteps(['/web/webclient/load_menus','/web/action/load','load_views','onchange','/web/dataset/search_read',]);});QUnit.test('view switcher button should be displayed in dropdown on mobile screens',async function(assert){assert.expect(7);const webClient=await createWebClient({serverData});await doAction(webClient,1);assert.containsOnce(webClient.el.querySelector('.o_control_panel'),'.o_cp_switch_buttons > button');assert.containsNone(webClient.el.querySelector('.o_control_panel'),'.o_cp_switch_buttons .o_switch_view.o_kanban');assert.containsNone(webClient.el.querySelector('.o_control_panel'),'.o_cp_switch_buttons button.o_switch_view');assert.hasClass(webClient.el.querySelector('.o_control_panel .o_cp_switch_buttons > button > span'),'fa-th-large');await click(webClient.el,'.o_control_panel .o_cp_switch_buttons > button');assert.hasClass(webClient.el.querySelector('.o_cp_switch_buttons button.o_switch_view.o_kanban'),'active');assert.doesNotHaveClass(webClient.el.querySelector('.o_cp_switch_buttons button.o_switch_view.o_list'),'active');assert.hasClass(webClient.el.querySelector('.o_cp_switch_buttons button.o_switch_view.o_kanban'),'fa-th-large');});return __exports;});;

/* /web_enterprise/static/tests/legacy/control_panel_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web.control_panel_mobile_tests',function(require){"use strict";const FormView=require('web.FormView');const testUtils=require('web.test_utils');const cpHelpers=require('@web/../tests/search/helpers');const{browser}=require("@web/core/browser/browser");const{patchWithCleanup}=require("@web/../tests/helpers/utils");const{createControlPanel,createView}=testUtils;const{createWebClient,doAction,getActionManagerServerData}=require('@web/../tests/webclient/helpers');let serverData;QUnit.module('Control Panel',{beforeEach:function(){this.actions=[{id:1,name:"Yes",res_model:'partner',type:'ir.actions.act_window',views:[[false,'list']],}];this.archs={'partner,false,list':'<tree><field name="foo"/></tree>','partner,false,search':`
                    <search>
                        <filter string="Active" name="my_projects" domain="[('boolean_field', '=', True)]"/>
                        <field name="foo" string="Foo"/>
                    </search>`,};this.data={partner:{fields:{foo:{string:"Foo",type:"char"},boolean_field:{string:"I am a boolean",type:"boolean"},},records:[{id:1,display_name:"First record",foo:"yop"},],},};const actions={};this.actions.forEach((act)=>{actions[act.xml_id||act.id]=act;});serverData=getActionManagerServerData();Object.assign(serverData,{models:this.data,views:this.archs,actions});patchWithCleanup(browser,{setTimeout:(fn)=>fn(),clearTimeout:()=>{},});},},function(){QUnit.test('basic rendering',async function(assert){assert.expect(2);const webClient=await createWebClient({serverData});await doAction(webClient,1);assert.containsNone(document.body,'.o_control_panel .o_mobile_search',"search options are hidden by default");assert.containsOnce(webClient,'.o_control_panel .o_enable_searchview',"should display a button to toggle the searchview");});QUnit.test("control panel appears at top on scroll event",async function(assert){assert.expect(12);const MAX_HEIGHT=800;const MIDDLE_HEIGHT=400;const DELTA_TEST=20;const viewPort=testUtils.prepareTarget();const form=await createView({View:FormView,arch:'<form>'+'<sheet>'+'<div style="height: 1000px"></div>'+'</sheet>'+'</form>',data:this.data,model:'partner',res_id:1,});const controlPanelEl=document.querySelector('.o_control_panel');const controlPanelHeight=controlPanelEl.getBoundingClientRect().height;viewPort.style.position='initial';async function scrollAndAssert(targetHeight,expectedTopValue,hasStickyClass){if(targetHeight!==null){window.scrollTo(0,targetHeight);await testUtils.nextTick();}
const expectedPixelValue=`${expectedTopValue}px`;assert.strictEqual(controlPanelEl.style.top,expectedPixelValue,`Top must be ${expectedPixelValue} (after scroll to ${targetHeight})`);if(hasStickyClass){assert.hasClass(controlPanelEl,'o_mobile_sticky');}else{assert.doesNotHaveClass(controlPanelEl,'o_mobile_sticky');}}
await scrollAndAssert(null,0,false);await scrollAndAssert(MAX_HEIGHT,-controlPanelHeight,true);await scrollAndAssert(MAX_HEIGHT-DELTA_TEST,-(controlPanelHeight-DELTA_TEST),true);await scrollAndAssert(MIDDLE_HEIGHT,0,true);await scrollAndAssert(MAX_HEIGHT,-controlPanelHeight,true);await scrollAndAssert(0,-controlPanelHeight,false);form.destroy();viewPort.style.position='';});QUnit.test("mobile search: basic display",async function(assert){assert.expect(4);const fields={birthday:{string:"Birthday",type:"date",store:true,sortable:true},};const searchMenuTypes=["filter","groupBy","comparison","favorite"];const params={cpModelConfig:{arch:`
                        <search>
                            <filter name="birthday" date="birthday"/>
                        </search>`,fields,searchMenuTypes,},cpProps:{fields,searchMenuTypes},};const controlPanel=await createControlPanel(params);await testUtils.dom.click(controlPanel.el.querySelector("button.o_enable_searchview"));await testUtils.dom.click(controlPanel.el.querySelector("button.o_toggle_searchview_full"));await cpHelpers.toggleFilterMenu(document);await cpHelpers.toggleMenuItem(document,"Birthday");await cpHelpers.toggleMenuItemOption(document,"Birthday",0);assert.containsOnce(document.body,".o_filter_menu");assert.containsOnce(document.body,".o_group_by_menu");assert.containsOnce(document.body,".o_comparison_menu");assert.containsOnce(document.body,".o_favorite_menu");controlPanel.destroy();});QUnit.test('mobile search: activate a filter through quick search',async function(assert){assert.expect(7);let searchRPCFlag=false;const mockRPC=(route,args)=>{if(searchRPCFlag){assert.deepEqual(args.domain,[['foo','ilike','A']],"domain should have been properly transferred to list view");}};const webClient=await createWebClient({serverData,mockRPC});await doAction(webClient,1);assert.containsOnce(document.body,'button.o_enable_searchview.fa-search',"should display a button to open the searchview");assert.containsNone(document.body,'.o_searchview_input_container',"Quick search input should be hidden");await testUtils.dom.click(document.querySelector('button.o_enable_searchview'));assert.containsOnce(document.body,'.o_toggle_searchview_full',"should display a button to expand the searchview");assert.containsOnce(document.body,'.o_searchview_input_container',"Quick search input should now be visible");searchRPCFlag=true;await cpHelpers.editSearch(document.body,"A");await cpHelpers.validateSearch(document.body);await testUtils.dom.click(document.querySelector('button.o_enable_searchview.fa-arrow-left'));assert.containsNone(document.body,'.o_toggle_searchview_full',"Expand icon shoud be hidden");assert.containsNone(document.body,'.o_searchview_input_container',"Quick search input should be hidden");});QUnit.test('mobile search: activate a filter in full screen search view',async function(assert){assert.expect(3);const webClient=await createWebClient({serverData});await doAction(webClient,1);assert.containsNone(document.body,'.o_mobile_search');await testUtils.dom.click(webClient.el.querySelector('button.o_enable_searchview'));await testUtils.dom.click(webClient.el.querySelector('.o_toggle_searchview_full'));assert.containsOnce(document.body,'.o_mobile_search');await cpHelpers.toggleFilterMenu(document.body);await cpHelpers.toggleMenuItem(document.body,"Active");await testUtils.dom.click([...document.querySelectorAll('.o_mobile_search_button')].find(e=>e.innerText.trim()==="FILTER"));assert.containsNone(document.body,'.o_mobile_search');});});});;

/* /web_enterprise/static/tests/legacy/form_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_enterprise.form_tests',function(require){"use strict";var FormView=require('web.FormView');var testUtils=require('web.test_utils');var createView=testUtils.createView;const{loadJS}=owl.utils;QUnit.module('web_enterprise',{beforeEach:function(){this.data={partner:{fields:{display_name:{string:"Displayed name",type:"char"},trululu:{string:"Trululu",type:"many2one",relation:'partner'},},records:[{id:1,display_name:"first record",trululu:4,},{id:2,display_name:"second record",trululu:1,},{id:4,display_name:"aaa",}],},};},},function(){QUnit.module('Mobile FormView');QUnit.test('statusbar buttons are correctly rendered in mobile',async function(assert){assert.expect(5);var form=await createView({View:FormView,model:'partner',data:this.data,arch:'<form string="Partners">'+'<header>'+'<button string="Confirm"/>'+'<button string="Do it"/>'+'</header>'+'<sheet>'+'<group>'+'<button name="display_name"/>'+'</group>'+'</sheet>'+'</form>',res_id:1,});assert.strictEqual(form.$('.o_statusbar_buttons a:contains(Action)').length,1,"statusbar should contain a button 'Action'");assert.containsOnce(form,'.o_statusbar_buttons .dropdown-menu',"statusbar should contain a dropdown");assert.containsNone(form,'.o_statusbar_buttons .dropdown-menu:visible',"dropdown should be hidden");await testUtils.dom.click(form.$('.o_statusbar_buttons a'));assert.containsOnce(form,'.o_statusbar_buttons .dropdown-menu:visible',"dropdown should be visible");assert.containsN(form,'.o_statusbar_buttons .dropdown-menu > button',2,"dropdown should contain 2 buttons");form.destroy();});QUnit.test('statusbar "Action" button should be displayed only if there are multiple visible buttons',async function(assert){assert.expect(4);var form=await createView({View:FormView,model:'partner',data:this.data,arch:'<form>'+'<header>'+'<button string="Confirm" attrs=\'{"invisible": [["display_name", "=", "first record"]]}\'/>'+'<button string="Do it" attrs=\'{"invisible": [["display_name", "=", "first record"]]}\'/>'+'</header>'+'<sheet>'+'<group>'+'<field name="display_name"/>'+'</group>'+'</sheet>'+'</form>',res_id:1,});assert.containsNone(form,'.o_statusbar_buttons > btn-group > .dropdown-toggle',"'Action' dropdown is not displayed as there are no visible buttons");assert.containsN(form,'.o_statusbar_buttons > button.o_invisible_modifier',2,"Status bar should have two buttons with 'o_invisible_modifier' class");await testUtils.form.clickEdit(form);await testUtils.fields.editInput(form.$('input[name=display_name]'),'test');await testUtils.form.clickSave(form);assert.containsOnce(form,'.o_statusbar_buttons a:contains(Action)',"statusbar should contain a button 'Action'");assert.containsOnce(form,'.o_statusbar_buttons .dropdown-menu',"statusbar should contain a dropdown");form.destroy();});QUnit.test('statusbar "Action" button not displayed in edit mode with .oe_read_only button',async function(assert){assert.expect(2);var form=await createView({View:FormView,model:'partner',data:this.data,arch:`
                <form>
                    <header>
                        <button string="Share" type="action" class="oe_highlight oe_read_only"/>
                        <button string="Email" type="action" class="oe_highlight oe_read_only"/>
                    </header>
                    <sheet>
                        <group>
                            <field name="display_name"/>
                        </group>
                    </sheet>
                </form>
            `,res_id:1,viewOptions:{mode:'edit',},});assert.containsNone(form,'.o_statusbar_buttons a:contains(Action)',"'Action' button should not be there");await testUtils.form.clickSave(form);assert.containsOnce(form,'.o_statusbar_buttons a:contains(Action)',"'Action' button should be there");form.destroy();});QUnit.test(`statusbar "Action" button shouldn't be displayed for only one visible button`,async function(assert){assert.expect(3);var form=await createView({View:FormView,model:'partner',data:this.data,arch:`<form>
                    <header>
                        <button string="Hola" attrs='{"invisible": [["display_name", "=", "first record"]]}'/>
                        <button string="Ciao"/>
                    </header>
                    <sheet>
                        <group>
                            <field name="display_name"/>
                        </group>
                    </sheet>
                </form>`,res_id:1,viewOptions:{mode:'edit',},});assert.containsNone(form,'.o_statusbar_buttons a:contains(Action)',"should have no 'Action' dropdown");assert.containsOnce(form,'.o_statusbar_buttons > button > span:contains(Ciao)',"should have a simple statusbar button 'Ciao'");await testUtils.fields.editInput(form.$('input[name=display_name]'),'test');assert.containsOnce(form,'.o_statusbar_buttons a:contains(Action)',"should have no 'Action' dropdown");form.destroy();});QUnit.test(`statusbar widgets should appear in the statusbar dropdown only if there are multiple items`,async function(assert){assert.expect(4);const form=await createView({View:FormView,model:'partner',data:this.data,arch:`
                <form string="Partners">
                    <header>
                        <widget name="attach_document" string="Attach document"/>
                        <button string="Ciao" attrs='{"invisible": [["display_name", "=", "first record"]]}'/>
                    </header>
                    <sheet>
                        <group>
                            <field name="display_name"/>
                        </group>
                    </sheet>
                </form>
            `,res_id:2,viewOptions:{mode:'edit',},});const dropdownActionButton='.o_statusbar_buttons a:contains(Action)';assert.containsOnce(form,dropdownActionButton,"should have 'Action' dropdown");assert.containsN(form,`.o_statusbar_buttons .dropdown-menu > button`,2,"should have 2 buttons in the dropdown");await testUtils.fields.editInput(form.$('input[name=display_name]'),'first record');assert.containsNone(form,dropdownActionButton,"shouldn't have 'Action' dropdown");assert.containsOnce(form,`.o_statusbar_buttons > button:visible`,"should have 1 button visible in the statusbar");form.destroy();});QUnit.test(`Quick Edition: quick edit many2one`,async function(assert){assert.expect(1);await loadJS("/web/static/lib/jquery.touchSwipe/jquery.touchSwipe.js");const form=await createView({View:FormView,model:'partner',data:this.data,arch:`
                <form>
                    <sheet>
                        <group>
                            <field name="trululu" />
                        </group>
                    </sheet>
                </form>
            `,archs:{'partner,false,kanban':`
                    <kanban>
                        <templates><t t-name="kanban-box">
                            <div class="oe_kanban_global_click">
                                <field name="display_name"/>
                            </div>
                        </t></templates>
                    </kanban>
                `,'partner,false,search':'<search></search>',},res_id:2,});await testUtils.dom.click(form.$('.o_form_label'));await testUtils.nextTick();const $modal=$('.o_modal_full .modal-lg');assert.equal($modal.length,1,'there should be one modal opened in full screen');form.destroy();});QUnit.test('statusbar "Action" dropdown should keep its open/close state',async function(assert){assert.expect(5);const form=await createView({View:FormView,model:'partner',data:this.data,arch:`
                <form>
                    <header>
                        <button string="Just more than one"/>
                        <button string="Confirm" attrs='{"invisible": [["display_name", "=", ""]]}'/>
                        <button string="Do it" attrs='{"invisible": [["display_name", "!=", ""]]}'/>
                    </header>
                    <sheet>
                        <field name="display_name"/>
                    </sheet>
                </form>
            `,});const dropdownMenuSelector='.o_statusbar_buttons .dropdown-menu';assert.containsOnce(form,dropdownMenuSelector,"statusbar should contain a dropdown");assert.doesNotHaveClass(form.el.querySelector(dropdownMenuSelector),'show',"dropdown should be closed");await testUtils.dom.click(form.el.querySelector('.o_statusbar_buttons .dropdown-toggle'));assert.hasClass(form.el.querySelector(dropdownMenuSelector),'show',"dropdown should be opened");await testUtils.fields.editInput(form.el.querySelector('input[name="display_name"]'),'test');assert.containsOnce(form,dropdownMenuSelector,"statusbar should contain a dropdown");assert.hasClass(form.el.querySelector(dropdownMenuSelector),'show',"dropdown should still be opened");form.destroy();});QUnit.test(`statusbar "Action" dropdown's open/close state shouldn't be modified after 'onchange'`,async function(assert){assert.expect(5);let resolveOnchange;const onchangePromise=new Promise(resolve=>{resolveOnchange=resolve;});this.data.partner.onchanges={display_name:async()=>{},};const form=await createView({View:FormView,model:'partner',data:this.data,arch:`
                <form>
                    <header>
                        <button name="create" string="Create Invoice" type="action"/>
                        <button name="send" string="Send by Email" type="action"/>
                    </header>
                    <sheet>
                        <field name="display_name" />
                    </sheet>
                </form>
            `,async mockRPC(route,{method,args:[,,changedField]}){return method==='onchange'&&changedField==='display_name'?onchangePromise:this._super(...arguments);},});const dropdownMenuSelector='.o_statusbar_buttons .dropdown-menu';assert.containsOnce(form,dropdownMenuSelector,"statusbar should contain a dropdown");assert.doesNotHaveClass(form.el.querySelector(dropdownMenuSelector),'show',"dropdown should be closed");await testUtils.fields.editInput(form.el.querySelector('input[name="display_name"]'),'before onchange');await testUtils.dom.click(form.el.querySelector('.o_statusbar_buttons .dropdown-toggle'));assert.hasClass(form.el.querySelector(dropdownMenuSelector),'show',"dropdown should be opened");resolveOnchange({value:{display_name:'after onchange'}});await testUtils.nextTick();assert.strictEqual(form.el.querySelector('input[name="display_name"]').value,'after onchange');assert.hasClass(form.el.querySelector(dropdownMenuSelector),'show',"dropdown should still be opened");form.destroy();});QUnit.test("preserve current scroll position on form view while closing dialog",async function(assert){assert.expect(6);const form=await createView({View:FormView,arch:`<form>
                    <sheet>
                        <p style='height:500px'></p>
                        <field name="trululu"/>
                        <p style='height:500px'></p>
                    </sheet>
                </form>`,archs:{"partner,false,kanban":`<kanban>
                    <templates><t t-name="kanban-box">
                        <div class="oe_kanban_global_click"><field name="display_name"/></div>
                    </t></templates>
                </kanban>`,"partner,false,search":"<search></search>",},data:this.data,model:"partner",res_id:2,debug:true,viewOptions:{mode:"edit"},});const scrollPosition={top:265,left:0};window.scrollTo(scrollPosition);assert.strictEqual(window.scrollY,scrollPosition.top,"Should have scrolled 265 px vertically");assert.strictEqual(window.scrollX,scrollPosition.left,"Should be 0 px from left as it is");await testUtils.dom.click(form.$(".o_field_many2one input"));assert.strictEqual(window.scrollY,0,"Should have scrolled to top (0) px");assert.containsOnce($("body"),".modal.o_modal_full","there should be a many2one modal opened in full screen");await testUtils.dom.click($(".modal").find(".modal-header .fa-arrow-left"));assert.strictEqual(window.scrollY,scrollPosition.top,"Should have scrolled back to 265 px vertically");assert.strictEqual(window.scrollX,scrollPosition.left,"Should be 0 px from left as it is");form.destroy();});});});;

/* /web_enterprise/static/tests/legacy/relational_fields_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_enterprise.relational_fields_mobile_tests',function(require){"use strict";var FormView=require('web.FormView');var testUtils=require('web.test_utils');var createView=testUtils.createView;QUnit.module('web_enterprise',{},function(){QUnit.module('relational_fields',{beforeEach:function(){this.data={partner:{fields:{display_name:{string:"Displayed name",type:"char"},trululu:{string:"Trululu",type:"many2one",relation:'partner'},sibling_ids:{string:"Sibling",type:"many2many",relation:'partner'},p:{string:"one2many field",type:"one2many",relation:'partner',relation_field:'trululu'},},records:[{id:1,display_name:"first record",trululu:4,},{id:2,display_name:"second record",trululu:1,},{id:4,display_name:"aaa",}],},};}},function(){QUnit.module('FieldStatus');QUnit.test('statusbar is rendered correclty on small devices',async function(assert){assert.expect(7);var form=await createView({View:FormView,model:'partner',data:this.data,arch:'<form string="Partners">'+'<header><field name="trululu" widget="statusbar"/></header>'+'<field name="display_name"/>'+'</form>',res_id:1,});assert.strictEqual(form.$('.o_statusbar_status > button:contains(aaa)').length,1,"should have only one visible status in mobile, the active one");assert.containsOnce(form,'.o_statusbar_status .dropdown-menu',"should have a dropdown containing all status");assert.containsNone(form,'.o_statusbar_status .dropdown-menu:visible',"dropdown should be hidden");testUtils.dom.click(form.$('.o_statusbar_status > button'));assert.containsOnce(form,'.o_statusbar_status .dropdown-menu:visible',"dropdown should be visible");assert.containsN(form,'.o_statusbar_status .dropdown-menu button',3,"should have 3 status");assert.containsN(form,'.o_statusbar_status button:disabled',3,"all status should be disabled");var $activeStatus=form.$('.o_statusbar_status .dropdown-menu button[data-value=4]');assert.hasClass($activeStatus,'btn-primary',"active status should be btn-primary");form.destroy();});QUnit.test('statusbar with no status on extra small screens',async function(assert){assert.expect(9);var form=await createView({View:FormView,model:'partner',data:this.data,arch:'<form string="Partners">'+'<header><field name="trululu" widget="statusbar"/></header>'+'</form>',res_id:4,});assert.hasClass(form.$('.o_statusbar_status'),'o_field_empty','statusbar widget should have class o_field_empty');assert.strictEqual(form.$('.o_statusbar_status').children().length,2,'statusbar widget should have two children');assert.containsOnce(form,'.o_statusbar_status button.dropdown-toggle','statusbar widget should have a button');assert.strictEqual(form.$('.o_statusbar_status button.dropdown-toggle').text().trim(),'','statusbar button has no text');assert.containsOnce(form,'.o_statusbar_status .dropdown-menu','statusbar widget should have a dropdown menu');assert.containsN(form,'.o_statusbar_status .dropdown-menu button',3,'statusbar widget dropdown menu should have 3 buttons');assert.strictEqual(form.$('.o_statusbar_status .dropdown-menu button').eq(0).text().trim(),'first record','statusbar widget dropdown first button should display the first record display_name');assert.strictEqual(form.$('.o_statusbar_status .dropdown-menu button').eq(1).text().trim(),'second record','statusbar widget dropdown second button should display the second record display_name');assert.strictEqual(form.$('.o_statusbar_status .dropdown-menu button').eq(2).text().trim(),'aaa','statusbar widget dropdown third button should display the third record display_name');form.destroy();});QUnit.test('clickable statusbar widget on mobile view',async function(assert){assert.expect(5);var form=await createView({View:FormView,model:'partner',data:this.data,arch:'<form string="Partners">'+'<header><field name="trululu" widget="statusbar" options=\'{"clickable": "1"}\'/></header>'+'</form>',res_id:1,});var $selectedStatus=form.$('.o_statusbar_status button[data-value="4"]');assert.hasClass($selectedStatus,'btn-primary');assert.hasClass($selectedStatus,'disabled');var selector='.o_statusbar_status button.btn-secondary:not(.dropdown-toggle):not(:disabled)';assert.containsN(form,selector,2,"other status should be btn-secondary and not disabled");await testUtils.dom.click(form.$('.o_statusbar_status .dropdown-toggle'));await testUtils.dom.clickFirst(form.$(selector));var $status=form.$('.o_statusbar_status button[data-value="1"]');assert.hasClass($status,'btn-primary');assert.hasClass($status,'disabled');form.destroy();});QUnit.module('FieldMany2One');QUnit.test("many2one in a enterprise environment",async function(assert){assert.expect(7);var form=await createView({View:FormView,arch:'<form>'+'<sheet>'+'<field name="trululu"/>'+'</sheet>'+'</form>',archs:{'partner,false,kanban':'<kanban>'+'<templates><t t-name="kanban-box">'+'<div class="oe_kanban_global_click"><field name="display_name"/></div>'+'</t></templates>'+'</kanban>','partner,false,search':'<search></search>',},data:this.data,model:'partner',res_id:2,viewOptions:{mode:'edit'},});var $input=form.$('.o_field_many2one input');assert.doesNotHaveClass($input,'ui-autocomplete-input',"autocomplete should not be visible in a mobile environment");await testUtils.dom.click($input);var $modal=$('.o_modal_full .modal-lg');assert.equal($modal.length,1,'there should be one modal opened in full screen');assert.containsOnce($modal,'.o_kanban_view','kanban view should be open in SelectCreateDialog');assert.containsOnce($modal,'.o_cp_searchview','should have Search view inside SelectCreateDialog');assert.containsNone($modal.find(".o_control_panel .o_cp_buttons"),'.o-kanban-button-new',"kanban view in SelectCreateDialog should not have Create button");assert.strictEqual($modal.find(".o_kanban_view .o_kanban_record:not(.o_kanban_ghost)").length,3,"popup should load 3 records in kanban");await testUtils.dom.click($modal.find('.o_kanban_view .o_kanban_record:first'));assert.strictEqual($input.val(),'first record','clicking kanban card should select record for many2one field');form.destroy();});QUnit.test("hide/show element using selection_mode in kanban view in a enterprise environment",async function(assert){assert.expect(5);this.data.partner.fields.foo={string:"Foo",type:"char",default:"My little Foo Value"};var form=await createView({View:FormView,arch:'<form>'+'<sheet>'+'<field name="trululu"/>'+'</sheet>'+'</form>',archs:{'partner,false,kanban':'<kanban>'+'<templates><t t-name="kanban-box">'+'<div class="oe_kanban_global_click">'+'<field name="display_name"/>'+'</div>'+'<div class="o_sibling_tags" t-if="!selection_mode">'+'<field name="sibling_ids"/>'+'</div>'+'<div class="o_foo" t-if="selection_mode">'+'<field name="foo"/>'+'</div>'+'</t></templates>'+'</kanban>','partner,false,search':'<search></search>',},data:this.data,model:'partner',res_id:2,viewOptions:{mode:'edit'},});var $input=form.$('.o_field_many2one input');assert.doesNotHaveClass($input,'ui-autocomplete-input',"autocomplete should not be visible in a mobile environment");await testUtils.dom.click($input);var $modal=$('.o_modal_full .modal-lg');assert.equal($modal.length,1,'there should be one modal opened in full screen');assert.containsOnce($modal,'.o_kanban_view','kanban view should be open in SelectCreateDialog');assert.containsNone($modal,'.o_kanban_view .o_sibling_tags','o_sibling_tags div should not be available as div have condition on selection_mode');assert.containsN($modal,'.o_kanban_view .o_foo',3,'o_foo div should be available as div have condition on selection_mode');form.destroy();});QUnit.test("kanban_view_ref attribute opens specific kanban view given as a reference in a mobile environment",async function(assert){assert.expect(5);var form=await createView({View:FormView,arch:'<form>'+'<sheet>'+'<field name="trululu" kanban_view_ref="2"/>'+'</sheet>'+'</form>',archs:{'partner,1,kanban':'<kanban class="kanban1">'+'<templates><t t-name="kanban-box">'+'<div class="oe_kanban_global_click">'+'<field name="display_name"/>'+'</div>'+'</t></templates>'+'</kanban>','partner,2,kanban':'<kanban class="kanban2">'+'<templates><t t-name="kanban-box">'+'<div class="oe_kanban_global_click">'+'<div>'+'<field name="display_name"/>'+'</div>'+'<div>'+'<field name="trululu"/>'+'</div>'+'</div>'+'</t></templates>'+'</kanban>','partner,false,search':'<search></search>',},data:this.data,model:'partner',res_id:2,viewOptions:{mode:'edit'},});var $input=form.$('.o_field_many2one input');assert.doesNotHaveClass($input,'ui-autocomplete-input',"autocomplete should not be visible in a mobile environment");await testUtils.dom.click($input);var $modal=$('.o_modal_full .modal-lg');assert.equal($modal.length,1,'there should be one modal opened in full screen');assert.containsOnce($modal,'.o_kanban_view','kanban view should be open in SelectCreateDialog');assert.hasClass($modal.find('.o_kanban_view'),'kanban2','kanban view with id 2 should be opened as it is given as kanban_view_ref');assert.strictEqual($modal.find('.o_kanban_view .o_kanban_record:first').text(),'first recordaaa','kanban with two fields should be opened');form.destroy();});QUnit.test("many2one dialog on mobile: clear button header",async function(assert){assert.expect(7);const form=await createView({View:FormView,arch:`
                <form>
                    <sheet>
                        <field name="trululu"/>
                    </sheet>
                </form>
            `,archs:{'partner,false,kanban':`
                    <kanban>
                        <templates><t t-name="kanban-box">
                            <div class="oe_kanban_global_click"><field name="display_name"/></div>
                        </t></templates>
                    </kanban>
                `,'partner,false,search':'<search></search>',},data:this.data,model:'partner',res_id:2,viewOptions:{mode:'edit'},});let $input=form.$('.o_field_many2one input');assert.doesNotHaveClass($input,'ui-autocomplete-input',"autocomplete should not be visible in a mobile environment");await testUtils.dom.click($input);assert.containsOnce($('body'),'.modal.o_modal_full',"there should be a modal opened in full screen");assert.containsN($('.modal'),'.o_kanban_view .o_kanban_record:not(.o_kanban_ghost)',3,"popup should load 3 records in kanban");await testUtils.dom.click($('.modal').find('.o_kanban_view .o_kanban_record:first'));assert.strictEqual($input.val(),'first record','clicking kanban card should select record for many2one field');await testUtils.dom.click($input);assert.containsOnce($('.modal').find('.modal-header'),'.o_clear_button',"there should be a Clear button in the modal header");await testUtils.dom.click($('.modal').find('.modal-header .o_clear_button'));assert.containsNone($('body'),'.modal',"there should be no more modal");$input=form.$('.o_field_many2one input');assert.strictEqual($input.val(),"","many2one should be cleared");form.destroy();});QUnit.module('FieldMany2Many');QUnit.test("many2many_tags in a mobile environment",async function(assert){assert.expect(10);var rpcReadCount=0;var form=await createView({View:FormView,arch:'<form>'+'<sheet>'+'<field name="sibling_ids" widget="many2many_tags"/>'+'</sheet>'+'</form>',archs:{'partner,false,kanban':'<kanban>'+'<templates><t t-name="kanban-box">'+'<div class="oe_kanban_global_click"><field name="display_name"/></div>'+'</t></templates>'+'</kanban>','partner,false,search':'<search></search>',},data:this.data,model:'partner',res_id:2,viewOptions:{mode:'edit'},mockRPC:function(route,args){if(args.method==="read"&&args.model==="partner"){if(rpcReadCount===0){assert.deepEqual(args.args[0],[2],"form should initially show partner 2");}else if(rpcReadCount===1){assert.deepEqual(args.args[0],[1],"partner with id 1 should be selected");}
rpcReadCount++;}
return this._super.apply(this,arguments);},});var $input=form.$(".o_field_widget .o_input");assert.strictEqual($input.find(".badge").length,0,"many2many_tags should have no tags");await testUtils.dom.click($input);var $modal=$('.o_modal_full .modal-lg');assert.equal($modal.length,1,'there should be one modal opened in full screen');assert.containsOnce($modal,'.o_kanban_view','kanban view should be open in SelectCreateDialog');assert.containsOnce($modal,'.o_cp_searchview','should have Search view inside SelectCreateDialog');assert.containsNone($modal.find(".o_control_panel .o_cp_buttons"),'.o-kanban-button-new',"kanban view in SelectCreateDialog should not have Create button");assert.strictEqual($modal.find(".o_kanban_view .o_kanban_record:not(.o_kanban_ghost)").length,3,"popup should load 3 records in kanban");await testUtils.dom.click($modal.find('.o_kanban_view .o_kanban_record:first'));assert.strictEqual(rpcReadCount,2,"there should be a read for current form record and selected sibling");assert.strictEqual(form.$(".o_field_widget.o_input .badge").length,1,"many2many_tags should have partner coucou3");form.destroy();});QUnit.module('FieldOne2Many');QUnit.test('one2many on mobile: remove header button',async function(assert){assert.expect(9);this.data.partner.records[0].p=[1,2,4];const form=await createView({View:FormView,model:'partner',data:this.data,arch:`
                <form string="Partners">
                    <field name="p"/>
                </form>
            `,archs:{'partner,false,form':`
                    <form string="Partner">
                        <field name="display_name"/>
                    </form>
                `,'partner,false,kanban':`
                    <kanban>
                        <templates><t t-name="kanban-box">
                            <div class="oe_kanban_global_click">
                                <field name="display_name"/>
                            </div>
                        </t></templates>
                    </kanban>
                `,},res_id:1,mockRPC(route,args){if(route==='/web/dataset/call_kw/partner/write'){const commands=args.args[1].p;assert.strictEqual(commands.length,3,'should have generated three commands');assert.ok(commands[0][0]===4&&commands[0][1]===2,'should have generated the command 4 (LINK_TO) with id 2');assert.ok(commands[1][0]===4&&commands[1][1]===4,'should have generated the command 2 (LINK_TO) with id 1');assert.ok(commands[2][0]===2&&commands[2][1]===1,'should have generated the command 2 (DELETE) with id 2');}
return this._super.apply(this,arguments);},});await testUtils.form.clickEdit(form);assert.containsN(form,'.o_kanban_view .o_kanban_record:not(.o_kanban_ghost)',3,"should have 3 records in kanban");await testUtils.dom.click(form.$('.o_kanban_view .o_kanban_record:first'));assert.containsOnce($('body'),'.modal.o_modal_full',"there should be a modal opened in full screen");assert.containsOnce($('.modal').find('.modal-header'),'.o_btn_remove',"there should be a 'Remove' button in the modal header");await testUtils.dom.click($('.modal').find('.modal-header .o_btn_remove'));assert.containsNone($('body'),'.modal',"there should be no more modal");assert.containsN(form,'.o_kanban_view .o_kanban_record:not(.o_kanban_ghost)',2,"should have 2 records in kanban");await testUtils.form.clickSave(form);form.destroy();});});});});;

/* /web_enterprise/static/tests/legacy/views/basic/basic_render_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_enterprise.BasicRenderMobileTests',function(require){"use strict";const BasicRenderer=require('web.BasicRenderer');const FormView=require('web.FormView');const testUtils=require('web.test_utils');const createView=testUtils.createView;QUnit.module('web_enterprise > basic > basic_render_mobile',{beforeEach:function(){this.data={partner:{fields:{display_name:{string:"Displayed name",type:"char",help:'The name displayed'},},records:[{id:1,display_name:"first record",},],},};}},function(){QUnit.module('Basic Render Mobile');QUnit.test(`field tooltip shouldn't remain displayed in mobile`,async function(assert){assert.expect(2);testUtils.mock.patch(BasicRenderer,{SHOW_AFTER_DELAY:0,_getTooltipOptions:function(){return Object.assign({},this._super(...arguments),{animation:false,});},});const form=await createView({View:FormView,model:'partner',data:this.data,arch:`
                <form>
                    <sheet>
                        <group>                    
                            <field name="display_name"/>
                        </group>
                    </sheet>
                </form>
            `,});const label=form.el.querySelector('label.o_form_label');await testUtils.dom.triggerEvent(label,'touchstart');assert.strictEqual(document.querySelectorAll('.tooltip .oe_tooltip_string').length,1,"should have a tooltip displayed");await testUtils.dom.triggerEvent(label,'touchend');assert.strictEqual(document.querySelectorAll('.tooltip .oe_tooltip_string').length,0,"shouldn't have a tooltip displayed");form.destroy();testUtils.mock.unpatch(BasicRenderer);});});});;

/* /web_enterprise/static/tests/legacy/views/calendar_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_enterprise.calendar_mobile_tests',function(require){"use strict";const CalendarRenderer=require('web.CalendarRenderer');const CalendarView=require('web.CalendarView');const testUtils=require('web.test_utils');const preInitialDate=new Date(2016,11,12,8,0,0);const initialDate=new Date(preInitialDate.getTime()-preInitialDate.getTimezoneOffset()*60*1000);QUnit.module('Views',{beforeEach:function(){this.data={event:{fields:{id:{string:"ID",type:"integer"},name:{string:"name",type:"char"},start:{string:"start datetime",type:"datetime"},stop:{string:"stop datetime",type:"datetime"},partner_id:{string:"user",type:"many2one",relation:'partner',related:'user_id.partner_id',default:1},},records:[{id:1,partner_id:1,name:"event 1",start:"2016-12-11 00:00:00",stop:"2016-12-11 00:00:00"},{id:2,partner_id:2,name:"event 2",start:"2016-12-12 10:55:05",stop:"2016-12-12 14:55:05"},],async check_access_rights(){return true;},},partner:{fields:{id:{string:"ID",type:"integer"},image:{string:"Image",type:"binary"},display_name:{string:"Displayed name",type:"char"},},records:[{id:1,display_name:"partner 1",image:'AAA'},{id:2,display_name:"partner 2",image:'BBB'},]},};},},function(){QUnit.module('CalendarView Mobile');QUnit.test('simple calendar rendering in mobile',async function(assert){assert.expect(7);const calendar=await testUtils.createView({arch:`
            <calendar date_start="start" date_stop="stop">
                <field name="name"/>
            </calendar>`,data:this.data,model:'event',View:CalendarView,viewOptions:{initialDate:initialDate,},});assert.containsNone(calendar.$buttons,'.o_calendar_button_prev',"prev button should be hidden");assert.containsNone(calendar.$buttons,'.o_calendar_button_next',"next button should be hidden");assert.isVisible(document.querySelector('.o_control_panel .o_cp_bottom_right button.o_cp_today_button'),"today button should be visible in the pager area (bottom right corner)");assert.containsOnce(calendar.el,'.fc-view-container > .fc-timeGridWeek-view',"should display the current week");await testUtils.dom.click($('.o_control_panel .o_calendar_button_day'));assert.containsOnce(calendar.el,'.fc-view-container > .fc-timeGridDay-view',"should display the current day");await testUtils.dom.click($('.o_control_panel .o_calendar_button_month'));assert.containsOnce(calendar.el,'.fc-view-container > .fc-dayGridMonth-view',"should display the current month");await testUtils.dom.click($('.o_control_panel .o_calendar_button_year'));assert.containsOnce(calendar.el,'.fc-view-container > .fc-dayGridYear-view',"should display the current year");calendar.destroy();});QUnit.test('calendar: popover rendering in mobile',async function(assert){assert.expect(4);let calendar=await testUtils.createCalendarView({View:CalendarView,model:'event',data:this.data,arch:'<calendar date_start="start" date_stop="stop">'+'<field name="name"/>'+'</calendar>',viewOptions:{initialDate:initialDate,},},{positionalClicks:true});let fullCalendarEvent=calendar.el.querySelector('.fc-event');await testUtils.dom.click(fullCalendarEvent);await testUtils.nextTick();let popover=document.querySelector('.o_cw_popover');assert.ok(popover!==null,"there should be a modal");assert.ok(popover.parentNode===document.body,"the container of popover must be the body");let actualPosition=popover.getBoundingClientRect();let windowRight=document.documentElement.clientWidth;let windowBottom=document.documentElement.clientHeight;let expectedPosition=[0,windowRight,windowBottom,0];assert.deepEqual([actualPosition.top,actualPosition.right,actualPosition.bottom,actualPosition.left],expectedPosition,"popover should be at position 0 "+windowRight+" "+windowBottom+" 0 (top right bottom left)");let closePopoverButton=document.querySelector('.o_cw_popover_close');await testUtils.dom.click(closePopoverButton);popover=document.querySelector('.o_cw_popover');assert.ok(popover===null,"there should be any modal");calendar.destroy();});QUnit.test('calendar: today button',async function(assert){assert.expect(1);const initialDate=new Date();initialDate.setDate(initialDate.getDate()+2);let calendar=await testUtils.createCalendarView({View:CalendarView,model:'event',data:this.data,arch:`<calendar mode="day" date_start="start" date_stop="stop"></calendar>`,viewOptions:{initialDate:initialDate,},});const previousDate=calendar.el.querySelector('.fc-day-header[data-date]').dataset.date;let todayButton=calendar.el.querySelector('.o_calendar_button_today');await testUtils.dom.click(todayButton);const newDate=calendar.el.querySelector('.fc-day-header[data-date]').dataset.date;assert.notEqual(newDate,previousDate,"The today button must change the view to the today date");calendar.destroy();});QUnit.test('calendar: show and change other calendar',async function(assert){assert.expect(8);let calendar=await testUtils.createCalendarView({View:CalendarView,model:'event',data:this.data,arch:`
                    <calendar date_start="start" date_stop="stop" color="partner_id">
                        <filter name="user_id" avatar_field="image"/>
                        <field name="partner_id" filters="1" invisible="1"/>
                    </calendar>
                `,viewOptions:{initialDate:initialDate,},},{positionalClicks:true});let otherCalendarPanel=calendar.el.querySelector('.o_other_calendar_panel');assert.ok(otherCalendarPanel!==null,"there should be a panel over the calendar");const span=otherCalendarPanel.querySelectorAll('.o_filter > span');assert.equal(span.length,3,'Panel should contains 3 span (1 label (USER) + 2 resources (user 1/2)');const calendarSidebar=calendar.el.querySelector('.o_calendar_sidebar');const calendarElement=calendar.el.querySelector('.o_calendar_view');assert.isVisible(calendarElement,"the calendar should be visible");assert.isNotVisible(calendarSidebar,"the panel with other calendar shouldn't be visible");otherCalendarPanel=calendar.el.querySelector('.o_other_calendar_panel');await testUtils.dom.click(otherCalendarPanel);assert.isNotVisible(calendarElement,"the calendar shouldn't be visible");assert.isVisible(calendarSidebar,"the panel with other calendar should be visible");otherCalendarPanel=calendar.el.querySelector('.o_other_calendar_panel');await testUtils.dom.click(otherCalendarPanel);assert.isVisible(calendarElement,"the calendar should be visible again");assert.isNotVisible(calendarSidebar,"the panel with other calendar shouldn't be visible again");calendar.destroy();});QUnit.test('calendar: short tap on "Free Zone" opens quick create',async function(assert){assert.expect(3);testUtils.mock.patch(CalendarRenderer,{_getFullCalendarOptions:function(){const options=this._super(...arguments);const oldSelect=options.select;options.select=(selectionInfo)=>{assert.step('select');if(oldSelect){return oldSelect(selectionInfo);}};const oldDateClick=options.dateClick;options.dateClick=(dateClickInfo)=>{assert.step('dateClick');if(oldDateClick){return oldDateClick(dateClickInfo);}};return options;},});const calendar=await testUtils.createCalendarView({View:CalendarView,model:'event',data:this.data,arch:`<calendar mode="day" date_start="start" date_stop="stop"></calendar>`,viewOptions:{initialDate:initialDate,},},{positionalClicks:true});const initCell=calendar.el.querySelector('.fc-time-grid .fc-minor[data-time="07:30:00"] .fc-widget-content:last-child');const boundingClientRect=initCell.getBoundingClientRect();const left=boundingClientRect.left+document.body.scrollLeft;const top=boundingClientRect.top+document.body.scrollTop;await testUtils.dom.triggerPositionalTapEvents(left,top);assert.strictEqual($('.modal').length,1,"should open a Quick create modal view in mobile on short tap");assert.verifySteps(['dateClick']);calendar.destroy();testUtils.mock.unpatch(CalendarRenderer);});});});;

/* /web_enterprise/static/tests/legacy/views/kanban_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_enterprise.kanban_mobile_tests',function(require){"use strict";const KanbanView=require('web.KanbanView');const{createView,dom}=require('web.test_utils');const{_t}=require('web.core');const{legacyExtraNextTick}=require("@web/../tests/helpers/utils");const{createWebClient,doAction}=require('@web/../tests/webclient/helpers');let serverData;QUnit.module('Views',{beforeEach(){this.data={partner:{fields:{foo:{string:"Foo",type:"char"},bar:{string:"Bar",type:"boolean"},int_field:{string:"int_field",type:"integer",sortable:true},qux:{string:"my float",type:"float"},product_id:{string:"something_id",type:"many2one",relation:"product"},category_ids:{string:"categories",type:"many2many",relation:'category'},state:{string:"State",type:"selection",selection:[["abc","ABC"],["def","DEF"],["ghi","GHI"]]},date:{string:"Date Field",type:'date'},datetime:{string:"Datetime Field",type:'datetime'},},records:[{id:1,bar:true,foo:"yop",int_field:10,qux:0.4,product_id:3,state:"abc",category_ids:[]},{id:2,bar:true,foo:"blip",int_field:9,qux:13,product_id:5,state:"def",category_ids:[6]},{id:3,bar:true,foo:"gnap",int_field:17,qux:-3,product_id:3,state:"ghi",category_ids:[7]},{id:4,bar:false,foo:"blip",int_field:-4,qux:9,product_id:5,state:"ghi",category_ids:[]},{id:5,bar:false,foo:"Hello \"World\"! #peace_n'_love",int_field:-9,qux:10,state:"jkl",category_ids:[]},]},product:{fields:{id:{string:"ID",type:"integer"},name:{string:"Display Name",type:"char"},},records:[{id:3,name:"hello"},{id:5,name:"xmo"},]},category:{fields:{name:{string:"Category Name",type:"char"},color:{string:"Color index",type:"integer"},},records:[{id:6,name:"gold",color:2},{id:7,name:"silver",color:5},]},};serverData={models:this.data};},},function(){QUnit.test('kanban with searchpanel: rendering in mobile',async function(assert){assert.expect(34);const kanban=await createView({View:KanbanView,model:'partner',data:this.data,arch:`
                <kanban>
                    <templates><t t-name="kanban-box">
                        <div>
                            <field name="foo"/>
                        </div>
                    </t></templates>
                </kanban>
            `,archs:{'partner,false,search':`
                    <search>
                        <searchpanel>
                            <field name="product_id" expand="1" enable_counters="1"/>
                            <field name="state" expand="1" select="multi" enable_counters="1"/>
                        </searchpanel>
                    </search>
                `,},mockRPC(route,{method}){if(method&&method.includes('search_panel_')){assert.step(method);}
return this._super.apply(this,arguments);},});let $sp=kanban.$(".o_search_panel");assert.containsOnce(kanban,"div.o_search_panel.o_search_panel_summary");assert.containsNone(document.body,"div.o_search_panel.o_searchview.o_mobile_search");assert.verifySteps(["search_panel_select_range","search_panel_select_multi_range",]);assert.containsOnce($sp,".fa.fa-filter");assert.containsOnce($sp,".o_search_panel_current_selection:contains(All)");await dom.click($sp);$sp=$(".o_search_panel");assert.containsNone(kanban,"div.o_search_panel.o_search_panel_summary");assert.containsOnce(document.body,"div.o_search_panel.o_searchview.o_mobile_search");assert.containsOnce($sp,".o_mobile_search_header > button:contains(FILTER)");assert.containsOnce($sp,"button.o_mobile_search_footer:contains(SEE RESULT)");assert.containsN($sp,".o_search_panel_section",2);assert.containsOnce($sp,".o_search_panel_section.o_search_panel_category");assert.containsOnce($sp,".o_search_panel_section.o_search_panel_filter");assert.containsN($sp,".o_search_panel_category_value",3);assert.containsOnce($sp,".o_search_panel_category_value > header.active",3);assert.containsN($sp,".o_search_panel_filter_value",3);await dom.click($sp.find(".o_search_panel_category_value:contains(hello) header"));assert.verifySteps(["search_panel_select_range","search_panel_select_multi_range",]);await dom.click($sp.find(".o_search_panel_filter_value:contains(DEF) input"));assert.verifySteps(["search_panel_select_range","search_panel_select_multi_range",]);await dom.click($sp.find(".o_mobile_search_header button"));$sp=$(".o_search_panel");assert.containsOnce(kanban,"div.o_search_panel.o_search_panel_summary");assert.containsNone(document.body,"div.o_search_panel.o_searchview.o_mobile_search");assert.containsOnce($sp,".o_search_panel_current_selection");assert.containsOnce($sp,".o_search_panel_category:contains(hello)");assert.containsOnce($sp,".o_search_panel_filter:contains(DEF)");await dom.click($sp);$sp=$(".o_search_panel");assert.containsOnce($sp,".o_search_panel_category_value > header.active:contains(hello)");assert.containsOnce($sp,".o_search_panel_filter_value:contains(DEF) input:checked");assert.containsNone(kanban,"div.o_search_panel.o_search_panel_summary");assert.containsOnce(document.body,"div.o_search_panel.o_searchview.o_mobile_search");await dom.click($sp.find("button.o_mobile_search_footer"));assert.containsOnce(kanban,"div.o_search_panel.o_search_panel_summary");assert.containsNone(document.body,"div.o_search_panel.o_searchview.o_mobile_search");kanban.destroy();});QUnit.module('KanbanView Mobile');QUnit.test('mobile grouped rendering',async function(assert){assert.expect(13);var kanban=await createView({View:KanbanView,model:'partner',data:this.data,arch:'<kanban class="o_kanban_test o_kanban_small_column" on_create="quick_create">'+'<templates><t t-name="kanban-box">'+'<div><field name="foo"/></div>'+'</t></templates>'+'</kanban>',domain:[['product_id','!=',false]],groupBy:['product_id'],});assert.containsN(kanban,'.o_kanban_group',2,"should have 2 columns");assert.hasClass(kanban.$('.o_kanban_mobile_tab:first'),'o_current',"first tab is the active tab with class 'o_current'");assert.hasClass(kanban.$('.o_kanban_group:first'),'o_current',"first column is the active column with class 'o_current'");assert.containsN(kanban,'.o_kanban_group:first > div.o_kanban_record',2,"there are 2 records in active tab");assert.strictEqual(kanban.$('.o_kanban_group:nth(1) > div.o_kanban_record').length,2,"there are 2 records in next tab. Records will be loaded when the kanban is opened");await dom.click(kanban.$buttons.find('.o-kanban-button-new'));assert.hasClass(kanban.$('.o_kanban_group:nth(0) > div:nth(1)'),'o_kanban_quick_create',"clicking on create should open the quick_create in the first column");await dom.click(kanban.$('.o_kanban_mobile_tab:nth(1)'));assert.hasClass(kanban.$('.o_kanban_mobile_tab:nth(1)'),'o_current',"second tab is now active with class 'o_current'");assert.hasClass(kanban.$('.o_kanban_group:nth(1)'),'o_current',"second column is now active with class 'o_current'");assert.strictEqual(kanban.$('.o_kanban_group:nth(1) > div.o_kanban_record').length,2,"the 2 records of the second group have now been loaded");await dom.click(kanban.$buttons.find('.o-kanban-button-new'));assert.hasClass(kanban.$('.o_kanban_group:nth(1) >  div:nth(1)'),'o_kanban_quick_create',"clicking on create should open the quick_create in the second column");var column_ids=kanban.$('.o_kanban_group').map(function(){return $(this).data('id');}).get();var tab_ids=kanban.$('.o_kanban_mobile_tab').map(function(){return $(this).data('id');}).get();assert.deepEqual(column_ids,tab_ids,"all columns data-id should match mobile tabs data-id");assert.containsN(kanban,'.o_kanban_mobile_tabs.justify-content-between',1,"should have justify-content-between class");assert.hasClass(kanban.$('.o_kanban_mobile_tabs'),'justify-content-between',"the mobile tabs have the class 'justify-content-between'");kanban.destroy();});QUnit.test('mobile grouped rendering in rtl direction',async function(assert){assert.expect(2);var direction=_t.database.parameters.direction;_t.database.parameters.direction='rtl';var kanban=await createView({View:KanbanView,model:'partner',data:this.data,arch:'<kanban class="o_kanban_test o_kanban_small_column" on_create="quick_create">'+'<templates><t t-name="kanban-box">'+'<div><field name="foo"/></div>'+'</t></templates>'+'</kanban>',domain:[['product_id','!=',false]],groupBy:['product_id'],});assert.strictEqual(kanban.$('.o_kanban_group:first')[0].style.right,'0%',"first tab should have 50% right");assert.strictEqual(kanban.$('.o_kanban_group:nth(1)')[0].style.right,'100%',"second tab should have 100% right");kanban.destroy();_t.database.parameters.direction=direction;});QUnit.test('mobile grouped with undefined column',async function(assert){assert.expect(5);var kanban=await createView({View:KanbanView,model:'partner',data:this.data,arch:'<kanban class="o_kanban_test o_kanban_small_column">'+'<templates><t t-name="kanban-box">'+'<div><field name="foo"/></div>'+'</t></templates>'+'</kanban>',groupBy:['product_id'],});assert.containsN(kanban,'.o_kanban_group',3,"should have 3 columns");assert.containsOnce(kanban,'.o_kanban_columns_content .o_kanban_group:first-child[data-id^="partner_"]',"Undefined column should be first and have unique framework identifier as data-id");var column_ids=kanban.$('.o_kanban_group').map(function(){return $(this).data('id');}).get();var tab_ids=kanban.$('.o_kanban_mobile_tab').map(function(){return $(this).data('id');}).get();assert.deepEqual(column_ids,tab_ids,"all columns data-id should match mobile tabs data-id");assert.containsN(kanban,'.o_kanban_mobile_tabs.justify-content-between',1,"should have justify-content-between class");assert.hasClass(kanban.$('.o_kanban_mobile_tabs'),'justify-content-between',"the mobile tabs have the class 'justify-content-between'");kanban.destroy();});QUnit.test('mobile grouped on many2one rendering',async function(assert){assert.expect(5);var kanban=await createView({View:KanbanView,model:'partner',data:this.data,arch:'<kanban class="o_kanban_test o_kanban_small_column">'+'<templates><t t-name="kanban-box">'+'<div><field name="foo"/></div>'+'</t></templates>'+'</kanban>',groupBy:['foo'],});assert.containsN(kanban,'.o_kanban_group',4,"should have 4 columns");assert.containsN(kanban,'.o_kanban_group[data-id^="partner_"]',4,"all column should have framework unique identifiers");var column_ids=kanban.$('.o_kanban_group').map(function(){return $(this).data('id');}).get();var tab_ids=kanban.$('.o_kanban_mobile_tab').map(function(){return $(this).data('id');}).get();assert.deepEqual(column_ids,tab_ids,"all columns data-id should match mobile tabs data-id");assert.containsN(kanban,'.o_kanban_mobile_tabs.justify-content-between',1,"should have justify-content-between class");assert.hasClass(kanban.$('.o_kanban_mobile_tabs'),'justify-content-between',"the mobile tabs have the class 'justify-content-between'");kanban.destroy();});QUnit.test('mobile quick create column view rendering',async function(assert){assert.expect(12);var kanban=await createView({View:KanbanView,model:'partner',data:this.data,arch:'<kanban class="o_kanban_test o_kanban_small_column" on_create="quick_create">'+'<templates><t t-name="kanban-box">'+'<div><field name="foo"/></div>'+'</t></templates>'+'</kanban>',domain:[['product_id','!=',false]],groupBy:['product_id'],});assert.containsN(kanban,'.o_kanban_group',2,"should have 2 columns");assert.hasClass(kanban.$('.o_kanban_view > .o_kanban_mobile_tabs_container > .o_kanban_mobile_tabs > div:last'),'o_kanban_mobile_add_column',"should have column quick create tab and should be displayed as last tab");assert.hasClass(kanban.$('.o_kanban_mobile_tab:first'),'o_current',"should have first tab as active tab with class 'o_current'");assert.hasClass(kanban.$('.o_kanban_group:first'),'o_current',"should have first group as active group with class 'o_current'");assert.hasClass(kanban.$('.o_kanban_group:first'),'o_current',"should have first column as active column with left 0");await dom.click(kanban.$('.o-kanban-button-new'));assert.hasClass(kanban.$('.o_kanban_group[data-id="3"].o_current > div:nth(1)'),'o_kanban_quick_create',"should open record quick create when clicking on create button in first column");await dom.click(kanban.$('.o_kanban_mobile_tab:last'));await dom.click(kanban.$('.o-kanban-button-new'));assert.hasClass(kanban.$('.o_kanban_group[data-id="5"].o_current > div:nth(1)'),'o_kanban_quick_create',"should open record quick create when clicking on create button in new column quick create");await dom.click(kanban.$('.o_kanban_mobile_add_column'));assert.isVisible(kanban.$('.o_quick_create_unfolded'),"kanban quick create should be unfolded by default");assert.isVisible(kanban.$('.o_column_quick_create input'),"the quick create column input should be visible");assert.containsNone(kanban,'.o_kanban_examples',"Should not have See Examples link in mobile");assert.containsNone(kanban,'.o_discard_msg',"Should not have Esc to Discard in mobile kanban");kanban.$('.o_column_quick_create input').val('msh');await dom.click(kanban.$('.o_column_quick_create button.o_kanban_add'));assert.strictEqual(kanban.$('.o_kanban_group:last span:contains(msh)').length,1,"the last column(tab) should be the newly created one");kanban.destroy();});QUnit.test('mobile no quick create column when grouping on non m2o field',async function(assert){assert.expect(2);var kanban=await createView({View:KanbanView,model:'partner',data:this.data,arch:'<kanban class="o_kanban_test o_kanban_small_column" on_create="quick_create">'+'<templates><t t-name="kanban-box">'+'<div><field name="foo"/></div>'+'<div><field name="int_field"/></div>'+'</t></templates>'+'</kanban>',groupBy:['int_field'],});assert.containsNone(kanban,'.o_kanban_mobile_add_column',"should not have the add column button");assert.containsNone(kanban.$('.o_column_quick_create'),"should not have column quick create tab as we grouped records on integer field");kanban.destroy();});QUnit.test('mobile kanban view: preserve active column on grouped kanban view',async function(assert){assert.expect(9);const views={'partner,false,kanban':'<kanban default_group_by="int_field">'+'<templates><t t-name="kanban-box">'+'<div class="oe_kanban_global_click"><field name="foo"/></div>'+'</t></templates>'+'</kanban>','partner,form_view,form':'<form string="Partner"><field name="foo"/></form>','partner,false,search':'<search><filter name="product" string="product" context="{\'group_by\': \'product_id\'}"/></search>',};Object.assign(serverData,{views});const webClient=await createWebClient({serverData});await doAction(webClient,{name:'Partner',res_model:'partner',type:'ir.actions.act_window',views:[[false,'kanban'],['form_view','form']],});assert.containsN(webClient,'.o_kanban_group',5,"should have 5 columns");assert.hasClass($(webClient.el).find('.o_kanban_mobile_tab:first'),'o_current',"by default, first tab should be active");assert.hasClass($(webClient.el).find('.o_kanban_group:first'),'o_current',"by default, first column should be active");await dom.click($(webClient.el).find('.o_kanban_mobile_tab:nth(1)'));assert.hasClass($(webClient.el).find('.o_kanban_mobile_tab:nth(1)'),'o_current',"second tab should be active");assert.hasClass($(webClient.el).find('.o_kanban_group:nth(1)'),'o_current',"second column should be active");await dom.click($(webClient.el).find('.o_kanban_group.o_current > .o_kanban_record:first'));await legacyExtraNextTick();await dom.click($(webClient.el).find('.o_back_button'));await legacyExtraNextTick();assert.hasClass($(webClient.el).find('.o_kanban_mobile_tab:nth(1)'),'o_current',"second tab should still be active");assert.hasClass($(webClient.el).find('.o_kanban_group:nth(1)'),'o_current',"second column should still be active");await dom.click($(webClient.el).find('.o_enable_searchview'));await dom.click($(webClient.el).find('.o_toggle_searchview_full'));await dom.click($('.o_group_by_menu > .dropdown-toggle'));await dom.click($('.o_group_by_menu .o_menu_item.dropdown-item'));await dom.click($('button.o_mobile_search_footer'));assert.hasClass($(webClient.el).find('.o_kanban_mobile_tab:first'),'o_current',"first available tab should be active");assert.hasClass($(webClient.el).find('.o_kanban_group:first'),'o_current',"first available column should be active");});QUnit.test("autofocus quick create form",async function(assert){assert.expect(2);const kanban=await createView({View:KanbanView,model:"partner",data:this.data,arch:`<kanban on_create="quick_create">
                    <templates>
                        <t t-name="kanban-box">
                            <div><field name="foo"/></div>
                        </t>
                    </templates>
                </kanban>`,groupBy:["product_id"],});await dom.click(kanban.$buttons.find(".o-kanban-button-new"));assert.ok(kanban.$(".o_kanban_group:nth(0) > div:nth(1)").hasClass("o_kanban_quick_create"),"clicking on create should open the quick_create in the first column");assert.strictEqual(document.activeElement,kanban.$(".o_kanban_quick_create .o_input:first")[0],"the first input field should get the focus when the quick_create is opened");kanban.destroy();});});});;

/* /web_enterprise/static/tests/legacy/views/list_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_enterprise.list_mobile_tests',function(require){"use strict";const ListRenderer=require('web.ListRenderer');const ListView=require('web.ListView');const testUtils=require('web.test_utils');const{createView,dom,mock}=testUtils;QUnit.module("Views",{beforeEach(){this.data={foo:{fields:{foo:{string:"Foo",type:"char"},bar:{string:"Bar",type:"boolean"},},records:[{id:1,bar:true,foo:"yop"},{id:2,bar:true,foo:"blip"},{id:3,bar:true,foo:"gnap"},{id:4,bar:false,foo:"blip"},],},};mock.patch(ListRenderer,{init(){this._super(...arguments);this.LONG_TOUCH_THRESHOLD=0;}});},afterEach(){mock.unpatch(ListRenderer);},},function(){QUnit.module("ListView Mobile");QUnit.test("selection is properly displayed (single page)",async function(assert){assert.expect(10);const list=await createView({touchScreen:true,arch:`
                    <tree>
                        <field name="foo"/>
                        <field name="bar"/>
                    </tree>`,data:this.data,model:'foo',viewOptions:{hasActionMenus:true},View:ListView,});assert.containsN(list,'.o_data_row',4);assert.containsNone(list,'.o_list_selection_box');await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchstart');await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchend');assert.containsOnce(list,'.o_list_selection_box');assert.containsNone(list.$('.o_list_selection_box'),'.o_list_select_domain');assert.ok(list.$('.o_list_selection_box').text().includes("1 selected"))
await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchstart');await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchend');assert.containsNone(list.$('.o_list_selection_box'),'.o_list_select_domain');await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchstart');await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchend');await dom.triggerEvent(list.$('.o_data_row:eq(1)'),'touchstart');await dom.triggerEvent(list.$('.o_data_row:eq(1)'),'touchend');assert.ok(list.$('.o_list_selection_box').text().includes("2 selected"))
assert.containsOnce(list.el,'div.o_control_panel .o_cp_action_menus');await testUtils.controlPanel.toggleActionMenu(list);assert.deepEqual(testUtils.controlPanel.getMenuItemTexts(list),['Delete'],'action menu should contain the Delete action');await dom.click(list.$('.o_discard_selection'));await testUtils.nextTick();assert.containsNone(list,'.o_list_selection_box');list.destroy();});QUnit.test("selection box is properly displayed (multi pages)",async function(assert){assert.expect(13);const list=await createView({touchScreen:true,arch:`
                    <tree limit="3">
                        <field name="foo"/>
                        <field name="bar"/>
                    </tree>`,data:this.data,model:'foo',View:ListView,viewOptions:{hasActionMenus:true},});assert.containsN(list,'.o_data_row',3);assert.containsNone(list,'.o_list_selection_box');await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchstart');await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchend');assert.containsOnce(list,'.o_list_selection_box');assert.containsNone(list.$('.o_list_selection_box'),'.o_list_select_domain');assert.strictEqual(list.$('.o_list_selection_box').text().replace(/\s+/g,' ')," × 1 selected ");assert.containsOnce(list,'.o_list_selection_box');assert.containsOnce(list.el,'div.o_control_panel .o_cp_action_menus');await testUtils.controlPanel.toggleActionMenu(list);assert.deepEqual(testUtils.controlPanel.getMenuItemTexts(list),['Delete'],'action menu should contain the Delete action');await dom.triggerEvent(list.$('.o_data_row:eq(1)'),'touchstart');await dom.triggerEvent(list.$('.o_data_row:eq(1)'),'touchend');await dom.triggerEvent(list.$('.o_data_row:eq(2)'),'touchstart');await dom.triggerEvent(list.$('.o_data_row:eq(2)'),'touchend');assert.containsOnce(list,'.o_list_selection_box');assert.containsOnce(list.$('.o_list_selection_box'),'.o_list_select_domain');assert.strictEqual(list.$('.o_list_selection_box').text().replace(/\s+/g,' ').trim(),"× 3 selected Select all 4");await dom.click(list.$('.o_list_selection_box .o_list_select_domain'));assert.containsOnce(list,'.o_list_selection_box');assert.strictEqual(list.$('.o_list_selection_box').text().replace(/\s+/g,' ').trim(),"× All 4 selected");list.destroy();});QUnit.test("export button is properly hidden",async function(assert){assert.expect(2);const list=await createView({touchScreen:true,arch:`
                    <tree>
                        <field name="foo"/>
                        <field name="bar"/>
                    </tree>`,data:this.data,model:'foo',View:ListView,session:{async user_has_group(group){if(group==='base.group_allow_export'){return true;}
return this._super(...arguments);},},});assert.containsN(list,'.o_data_row',4);assert.isNotVisible(list.$buttons.find('.o_list_export_xlsx'));list.destroy();});QUnit.test('editable readonly list view is disabled',async function(assert){assert.expect(1);const list=await createView({touchScreen:true,arch:`
                    <tree>
                        <field name="foo"/>
                    </tree>`,data:this.data,model:'foo',View:ListView,});await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchstart');await dom.triggerEvent(list.$('.o_data_row:eq(0)'),'touchend');await testUtils.dom.click(list.$('.o_data_row:eq(0) .o_data_cell:eq(0)'));assert.containsNone(list,'.o_selected_row .o_field_widget[name=foo]',"The listview should not contains an edit field");list.destroy();});QUnit.test("add custom field button not shown in mobile (with opt. col.)",async function(assert){assert.expect(3);const list=await testUtils.createView({arch:`
                    <tree>
                        <field name="foo"/>
                        <field name="bar" optional="hide"/>
                    </tree>`,data:this.data,model:'foo',touchScreen:true,View:ListView,});assert.containsOnce(list.$('table'),'.o_optional_columns_dropdown_toggle');await testUtils.dom.click(list.$('table .o_optional_columns_dropdown_toggle'));const $dropdown=list.$('div.o_optional_columns');assert.containsOnce($dropdown,'div.dropdown-item');assert.containsNone($dropdown,'button.dropdown-item-studio');list.destroy();});QUnit.test("add custom field button not shown to non-system users (wo opt. col.)",async function(assert){assert.expect(1);const list=await testUtils.createView({arch:`
                    <tree>
                        <field name="foo"/>
                        <field name="bar"/>
                    </tree>`,data:this.data,model:'foo',touchScreen:true,View:ListView,});assert.containsNone(list.$('table'),'.o_optional_columns_dropdown_toggle');list.destroy();});});});;

/* /web_enterprise/static/tests/legacy/base_settings_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('base.settings_mobile_tests',function(require){"use strict";var BaseSetting=require('base.settings');var testUtils=require('web.test_utils');var view_registry=require('web.view_registry');var BaseSettingsView=view_registry.get('base_settings');var createView=testUtils.createView;BaseSetting.Renderer.include({_getAppIconUrl:function(){return'';},});QUnit.module('mobile_base_settings_tests',{beforeEach:function(){this.data={project:{fields:{foo:{string:'Foo',type:'boolean'},bar:{string:'Bar',type:'boolean'},},},};}},function(){QUnit.module('BaseSettings Mobile');QUnit.test('swipe settings in mobile',async function(assert){assert.expect(2);var oldSwipe=$.fn.swipe;var swipeLeft,swipeRight;$.fn.swipe=function(params){swipeLeft=params.swipeLeft;swipeRight=params.swipeRight;};var form=await createView({View:BaseSettingsView,model:'project',data:this.data,arch:'<form string="Settings" class="oe_form_configuration o_base_settings">'+'<div class="o_setting_container">'+'<div class="settings_tab"/>'+'<div class="settings">'+'<div class="app_settings_block" data-string="CRM" data-key="crm">'+'<div class="row mt16 o_settings_container">'+'<div class="col-12 col-lg-6 o_setting_box">'+'<div class="o_setting_left_pane">'+'<field name="bar"/>'+'</div>'+'<div class="o_setting_right_pane">'+'<label for="bar"/>'+'<div class="text-muted">'+'this is bar'+'</div>'+'</div>'+'</div>'+'</div>'+'</div>'+'<div class="app_settings_block" data-string="Project" data-key="project">'+'<div class="row mt16 o_settings_container">'+'<div class="col-12 col-lg-6 o_setting_box">'+'<div class="o_setting_left_pane">'+'<field name="foo"/>'+'</div>'+'<div class="o_setting_right_pane">'+'<label for="foo"/>'+'<div class="text-muted">'+'this is foo'+'</div>'+'</div>'+'</div>'+'</div>'+'</div>'+'</div>'+'</div>'+'</form>',});swipeLeft();assert.strictEqual(form.$('.settings .current').data('key'),'project','current setting should be project');swipeRight();assert.strictEqual(form.$('.settings .current').data('key'),'crm','current setting should be crm');$.fn.swipe=oldSwipe;form.destroy();});});});;

/* /web_enterprise/static/tests/legacy/components/action_menus_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web.action_menus_mobile_tests',function(require){"use strict";const ActionMenus=require('web.ActionMenus');const Registry=require('web.Registry');const testUtils=require('web.test_utils');const{createComponent}=testUtils;QUnit.module('Components',{beforeEach(){this.action={res_model:'hobbit',};this.view={type:'form',};this.props={activeIds:[23],context:{},items:{action:[{action:{id:1},name:"What's taters, precious ?",id:1},],print:[{action:{id:2},name:"Po-ta-toes",id:2},],},};this.actionMenusRegistry=ActionMenus.registry;ActionMenus.registry=new Registry();},afterEach(){ActionMenus.registry=this.actionMenusRegistry;},},function(){QUnit.module('ActionMenus');QUnit.test('Auto close the print dropdown after click inside an item',async function(assert){assert.expect(6);const actionMenus=await createComponent(ActionMenus,{env:{device:{isMobile:true},action:this.action,view:this.view,},intercepts:{'do-action':ev=>assert.step('do-action'),},props:this.props,async mockRPC(route,args){switch(route){case'/web/action/load':const expectedContext={active_id:23,active_ids:[23],active_model:'hobbit',};assert.deepEqual(args.context,expectedContext);assert.step('load-action');return{context:{},flags:{}};default:return this._super(...arguments);}},});await testUtils.controlPanel.toggleActionMenu(actionMenus,"Print");assert.containsOnce(actionMenus.el,'.dropdown-menu-left',"should display the dropdown menu");await testUtils.controlPanel.toggleMenuItem(actionMenus,"Po-ta-toes");assert.containsNone(actionMenus.el,'.dropdown-menu-left',"should not display the dropdown menu");assert.verifySteps(['load-action','do-action']);actionMenus.destroy();});});});;

/* /web_enterprise/static/tests/legacy/barcodes_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_mobile.barcode.tests',function(require){"use strict";const ajax=require('web.ajax');const fieldRegistry=require('web.field_registry');const FormView=require('web.FormView');const{FieldMany2One}=require('web.relational_fields');const{createView,dom,mock}=require('web.test_utils');const FieldMany2OneBarcode=require('web_mobile.barcode_fields');const BarcodeScanner=require('@web_enterprise/webclient/barcode/barcode_scanner')[Symbol.for("default")];const NAME_SEARCH="name_search";const PRODUCT_PRODUCT='product.product';const SALE_ORDER_LINE='sale_order_line';const PRODUCT_FIELD_NAME='product_id';const ARCHS={'product.product,false,kanban':`
            <kanban><templates>
                <t t-name="kanban-box">
                    <div class="oe_kanban_global_click"><field name="display_name"/></div>
                </t>
            </templates></kanban>`,'product.product,false,search':'<search></search>',};async function mockRPC(route,args){const result=await this._super(...arguments);if(args.method===NAME_SEARCH&&args.model===PRODUCT_PRODUCT){const records=this.data[PRODUCT_PRODUCT].records.filter((record)=>record.barcode===args.kwargs.name).map((record)=>[record.id,record.name]);return records.concat(result);}
return result;}
QUnit.module('web_mobile',{beforeEach(){this.data={[PRODUCT_PRODUCT]:{fields:{id:{type:'integer'},name:{},barcode:{},},records:[{id:111,name:'product_cable_management_box',barcode:'601647855631',},{id:112,name:'product_n95_mask',barcode:'601647855632',},{id:113,name:'product_surgical_mask',barcode:'601647855633',}],},[SALE_ORDER_LINE]:{fields:{id:{type:'integer'},[PRODUCT_FIELD_NAME]:{string:PRODUCT_FIELD_NAME,type:'many2one',relation:PRODUCT_PRODUCT},product_uom_qty:{type:'integer'}}},};},},function(){QUnit.test("web_mobile: barcode button in a mobile environment with single results",async function(assert){assert.expect(2);fieldRegistry.add('many2one_barcode',FieldMany2OneBarcode);mock.patch(BarcodeScanner,{isBarcodeScannerSupported:()=>true,scanBarcode:async()=>this.data[PRODUCT_PRODUCT].records[0].barcode,});const form=await createView({View:FormView,arch:`
                    <form>
                        <sheet>
                            <field name="${PRODUCT_FIELD_NAME}" widget="many2one_barcode"/>
                        </sheet>
                    </form>`,data:this.data,model:SALE_ORDER_LINE,archs:ARCHS,mockRPC,});const $scanButton=form.$('.o_barcode_mobile');assert.equal($scanButton.length,1,"has scanner button");await dom.click($scanButton);const selectedId=form.renderer.state.data[PRODUCT_FIELD_NAME].res_id;assert.equal(selectedId,this.data[PRODUCT_PRODUCT].records[0].id,`product found and selected (${this.data[PRODUCT_PRODUCT].records[0].barcode})`);form.destroy();fieldRegistry.add('many2one_barcode',FieldMany2One);mock.unpatch(BarcodeScanner);});QUnit.test("web_mobile: barcode button in a mobile environment with multiple results",async function(assert){assert.expect(4);fieldRegistry.add('many2one_barcode',FieldMany2OneBarcode);mock.patch(BarcodeScanner,{isBarcodeScannerSupported:()=>true,scanBarcode:async()=>"mask",});const form=await createView({View:FormView,arch:`
                    <form>
                        <sheet>
                            <field name="${PRODUCT_FIELD_NAME}" widget="many2one_barcode"/>
                        </sheet>
                    </form>`,data:this.data,model:SALE_ORDER_LINE,archs:ARCHS,mockRPC,});await ajax.loadJS('/web/static/lib/jquery.touchSwipe/jquery.touchSwipe.js');const $scanButton=form.$('.o_barcode_mobile');assert.equal($scanButton.length,1,"has scanner button");await dom.click($scanButton);const $modal=$('.o_modal_full .modal-lg');assert.equal($modal.length,1,'there should be one modal opened in full screen');assert.equal($modal.find('.o_kanban_view .o_kanban_record:not(.o_kanban_ghost)').length,2,'there should be 2 records displayed');await dom.click($modal.find('.o_kanban_view .o_kanban_record:first'));const selectedId=form.renderer.state.data[PRODUCT_FIELD_NAME].res_id;assert.equal(selectedId,this.data[PRODUCT_PRODUCT].records[1].id,`product found and selected (${this.data[PRODUCT_PRODUCT].records[1].barcode})`);form.destroy();fieldRegistry.add('many2one_barcode',FieldMany2One);mock.unpatch(BarcodeScanner);});});});;

/* /web_mobile/static/tests/user_menu_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('@web_mobile/../tests/user_menu_mobile_tests',async function(require){'use strict';let __exports={};const{registry}=require("@web/core/registry");const{hotkeyService}=require("@web/core/hotkeys/hotkey_service");const{UserMenu}=require("@web/webclient/user_menu/user_menu");const{shortcutItem,switchAccountItem}=require("@web_mobile/js/user_menu_items");const{makeTestEnv}=require("@web/../tests/helpers/mock_env");const{makeFakeNotificationService}=require("@web/../tests/helpers/mock_services");const{click,getFixture,patchWithCleanup}=require("@web/../tests/helpers/utils");const{menuService}=require("@web/webclient/menus/menu_service");const{actionService}=require("@web/webclient/actions/action_service");const mobile=require("web_mobile.core");const{mount}=owl;const serviceRegistry=registry.category("services");const userMenuRegistry=registry.category("user_menuitems");const MY_IMAGE="iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==";let target;let userMenu;QUnit.module("UserMenu",{async beforeEach(){serviceRegistry.add("hotkey",hotkeyService);serviceRegistry.add("action",actionService);serviceRegistry.add("menu",menuService);target=getFixture();},afterEach(){userMenu.unmount();},});QUnit.test("can execute the callback of addHomeShortcut on an App",async(assert)=>{assert.expect(7)
patchWithCleanup(mobile.methods,{addHomeShortcut({title,shortcut_url,web_icon}){assert.step("should call addHomeShortcut");assert.strictEqual(title,document.title);assert.strictEqual(shortcut_url,document.URL);assert.strictEqual(web_icon,MY_IMAGE);}});const menus={root:{id:"root",children:[1],name:"root",appID:"root"},1:{id:1,children:[],name:"App0",appID:1,webIconData:`data:image/png;base64,${MY_IMAGE}`},};const baseConfig={serverData:{menus}};const env=await makeTestEnv(baseConfig);userMenuRegistry.add("web_mobile.shortcut",shortcutItem);env.services.menu.setCurrentMenu(1);userMenu=await mount(UserMenu,{env,target});await click(userMenu.el.querySelector("button.dropdown-toggle"));assert.containsOnce(userMenu.el,".dropdown-menu .dropdown-item");const item=userMenu.el.querySelector(".dropdown-menu .dropdown-item");assert.strictEqual(item.textContent,"Add to Home Screen");await click(item);assert.verifySteps(['should call addHomeShortcut']);});QUnit.test("can execute the callback of addHomeShortcut on the HomeMenu",async(assert)=>{assert.expect(4)
patchWithCleanup(mobile.methods,{addHomeShortcut(){assert.step("shouldn't call addHomeShortcut");}});const mockNotification=(message)=>{assert.step(`notification (${message})`);return()=>{};}
serviceRegistry.add("notification",makeFakeNotificationService(mockNotification));const env=await makeTestEnv();userMenuRegistry.add("web_mobile.shortcut",shortcutItem);userMenu=await mount(UserMenu,{env,target});await click(userMenu.el.querySelector("button.dropdown-toggle"));assert.containsOnce(userMenu.el,".dropdown-menu .dropdown-item");const item=userMenu.el.querySelector(".dropdown-menu .dropdown-item");assert.strictEqual(item.textContent,"Add to Home Screen");await click(item);assert.verifySteps(["notification (No shortcut for Home Menu)"]);});QUnit.test("can execute the callback of switchAccount",async(assert)=>{assert.expect(4)
patchWithCleanup(mobile.methods,{switchAccount(){assert.step("should call switchAccount");}});const env=await makeTestEnv();userMenuRegistry.add("web_mobile.switch",switchAccountItem);userMenu=await mount(UserMenu,{env,target});await click(userMenu.el.querySelector("button.dropdown-toggle"));assert.containsOnce(userMenu.el,".dropdown-menu .dropdown-item");const item=userMenu.el.querySelector(".dropdown-menu .dropdown-item");assert.strictEqual(item.textContent,"Switch/Add Account");await click(item);assert.verifySteps(["should call switchAccount"]);});return __exports;});;

/* /web_mobile/static/tests/web_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define("web_mobile.tests",function(require){"use strict";const Dialog=require("web.Dialog");const dom=require("web.dom");const FormView=require("web.FormView");const OwlDialog=require("web.OwlDialog");const Popover=require("web.Popover");const session=require("web.session");const makeTestEnvironment=require("web.test_env");const testUtils=require("web.test_utils");const Widget=require("web.Widget");const{useBackButton}=require("web_mobile.hooks");const{BackButtonEventMixin,UpdateDeviceAccountControllerMixin,}=require("web_mobile.mixins");const mobile=require("web_mobile.core");const UserPreferencesFormView=require("web_mobile.UserPreferencesFormView");const{base64ToBlob}=require("web_mobile.testUtils");const{createWebClient,doAction}=require('@web/../tests/webclient/helpers');const{Component,tags,useState}=owl;const{xml}=tags;const{createParent,createView,mock}=testUtils;const MY_IMAGE="iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==";const BASE64_SVG_IMAGE="PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHdpZHRoPScxNzUnIGhlaWdodD0nMTAwJyBmaWxsPScjMDAwJz48cG9seWdvbiBwb2ludHM9JzAsMCAxMDAsMCA1MCw1MCcvPjwvc3ZnPg==";const BASE64_PNG_HEADER="iVBORw0KGg";QUnit.module("web_mobile",{beforeEach:function(){this.data={partner:{fields:{name:{string:"name",type:"char"},avatar_1920:{},parent_id:{string:"Parent",type:"many2one",relation:"partner"},sibling_ids:{string:"Sibling",type:"many2many",relation:"partner",},phone:{},mobile:{},email:{},street:{},street2:{},city:{},state_id:{},zip:{},country_id:{},website:{},function:{},title:{},date:{string:"A date",type:"date"},datetime:{string:"A datetime",type:"datetime"},},records:[{id:1,name:"coucou1",},{id:2,name:"coucou2",},{id:11,name:"coucou3",avatar_1920:"image",parent_id:1,phone:"phone",mobile:"mobile",email:"email",street:"street",street2:"street2",city:"city",state_id:"state_id",zip:"zip",country_id:"country_id",website:"website",function:"function",title:"title",},],},users:{fields:{name:{string:"name",type:"char"},},records:[],},};},},function(){QUnit.module("core",function(){QUnit.test("BackButtonManager",async function(assert){assert.expect(13);mock.patch(mobile.methods,{overrideBackButton({enabled}){assert.step(`overrideBackButton: ${enabled}`);},});const{BackButtonManager,BackButtonListenerError}=mobile;const manager=new BackButtonManager();const DummyWidget=Widget.extend({_onBackButton(ev){assert.step(`${ev.type} event`);},});const dummy=new DummyWidget();manager.addListener(dummy,dummy._onBackButton);assert.verifySteps(["overrideBackButton: true"]);await testUtils.dom.triggerEvent(document,"backbutton");assert.verifySteps(["backbutton event"]);manager.removeListener(dummy);assert.verifySteps(["overrideBackButton: false"]);await testUtils.dom.triggerEvent(document,"backbutton");assert.verifySteps([],"shouldn't trigger any handler");manager.addListener(dummy,dummy._onBackButton);assert.throws(()=>{manager.addListener(dummy,dummy._onBackButton);},BackButtonListenerError,"should raise an error if adding a listener twice");assert.verifySteps(["overrideBackButton: true"]);manager.removeListener(dummy);assert.throws(()=>{manager.removeListener(dummy);},BackButtonListenerError,"should raise an error if removing a non-registered listener");assert.verifySteps(["overrideBackButton: false"]);dummy.destroy();mock.unpatch(mobile.methods);});});QUnit.module("BackButtonEventMixin");QUnit.test("widget should receive a backbutton event",async function(assert){assert.expect(5);const __overrideBackButton=mobile.methods.overrideBackButton;mobile.methods.overrideBackButton=function({enabled}){assert.step(`overrideBackButton: ${enabled}`);};const DummyWidget=Widget.extend(BackButtonEventMixin,{_onBackButton(ev){assert.step(`${ev.type} event`);},});const backButtonEvent=new Event("backbutton");const dummy=new DummyWidget();dummy.appendTo($("<div>"));document.dispatchEvent(backButtonEvent);await testUtils.nextTick();assert.verifySteps([],"shouldn't have register handle before attached to the DOM");dom.append($("qunit-fixture"),dummy.$el,{in_DOM:true,callbacks:[{widget:dummy}],});document.dispatchEvent(backButtonEvent);await testUtils.nextTick();dom.detach([{widget:dummy}]);assert.verifySteps(["overrideBackButton: true","backbutton event","overrideBackButton: false"],"should have enabled/disabled the back-button override");dummy.destroy();mobile.methods.overrideBackButton=__overrideBackButton;});QUnit.test("multiple widgets should receive backbutton events in the right order",async function(assert){assert.expect(6);const __overrideBackButton=mobile.methods.overrideBackButton;mobile.methods.overrideBackButton=function({enabled}){assert.step(`overrideBackButton: ${enabled}`);};const DummyWidget=Widget.extend(BackButtonEventMixin,{init(parent,{name}){this._super.apply(this,arguments);this.name=name;},_onBackButton(ev){assert.step(`${this.name}: ${ev.type} event`);dom.detach([{widget:this}]);},});const backButtonEvent=new Event("backbutton");const dummy1=new DummyWidget(null,{name:"dummy1"});dom.append($("qunit-fixture"),dummy1.$el,{in_DOM:true,callbacks:[{widget:dummy1}],});const dummy2=new DummyWidget(null,{name:"dummy2"});dom.append($("qunit-fixture"),dummy2.$el,{in_DOM:true,callbacks:[{widget:dummy2}],});const dummy3=new DummyWidget(null,{name:"dummy3"});dom.append($("qunit-fixture"),dummy3.$el,{in_DOM:true,callbacks:[{widget:dummy3}],});document.dispatchEvent(backButtonEvent);await testUtils.nextTick();document.dispatchEvent(backButtonEvent);await testUtils.nextTick();document.dispatchEvent(backButtonEvent);await testUtils.nextTick();assert.verifySteps(["overrideBackButton: true","dummy3: backbutton event","dummy2: backbutton event","dummy1: backbutton event","overrideBackButton: false",]);dummy1.destroy();dummy2.destroy();dummy3.destroy();mobile.methods.overrideBackButton=__overrideBackButton;});QUnit.module("useBackButton");QUnit.test("component should receive a backbutton event",async function(assert){assert.expect(5);mock.patch(mobile.methods,{overrideBackButton({enabled}){assert.step(`overrideBackButton: ${enabled}`);},});class DummyComponent extends Component{constructor(){super();this._backButtonHandler=useBackButton(this._onBackButton);}
_onBackButton(ev){assert.step(`${ev.type} event`);}}
DummyComponent.template=xml`<div/>`;const dummy=new DummyComponent();await dummy.mount(document.createDocumentFragment());await testUtils.dom.triggerEvent(document,"backbutton");assert.verifySteps([],"shouldn't have register handle before attached to the DOM");dummy.unmount();await dummy.mount(document.getElementById("qunit-fixture"));await testUtils.dom.triggerEvent(document,"backbutton");dummy.unmount();assert.verifySteps(["overrideBackButton: true","backbutton event","overrideBackButton: false"],"should have enabled/disabled the back-button override");dummy.destroy();mock.unpatch(mobile.methods);});QUnit.test("multiple components should receive backbutton events in the right order",async function(assert){assert.expect(6);mock.patch(mobile.methods,{overrideBackButton({enabled}){assert.step(`overrideBackButton: ${enabled}`);},});class DummyComponent extends Component{constructor(){super(...arguments);this._backButtonHandler=useBackButton(this._onBackButton);}
_onBackButton(ev){assert.step(`${this.props.name}: ${ev.type} event`);this.unmount();}}
DummyComponent.template=xml`<div/>`;const fixture=document.getElementById("qunit-fixture");const dummy1=new DummyComponent(null,{name:"dummy1"});await dummy1.mount(fixture);const dummy2=new DummyComponent(null,{name:"dummy2"});await dummy2.mount(fixture);const dummy3=new DummyComponent(null,{name:"dummy3"});await dummy3.mount(fixture);await testUtils.dom.triggerEvent(document,"backbutton");await testUtils.dom.triggerEvent(document,"backbutton");await testUtils.dom.triggerEvent(document,"backbutton");assert.verifySteps(["overrideBackButton: true","dummy3: backbutton event","dummy2: backbutton event","dummy1: backbutton event","overrideBackButton: false",]);dummy1.destroy();dummy2.destroy();dummy3.destroy();mock.unpatch(mobile.methods);});QUnit.test("component should receive a backbutton event: custom activation",async function(assert){assert.expect(10);mock.patch(mobile.methods,{overrideBackButton({enabled}){assert.step(`overrideBackButton: ${enabled}`);},});class DummyComponent extends Component{constructor(){super();this._backButtonHandler=useBackButton(this._onBackButton,this.shouldActivateBackButton.bind(this));this.state=useState({show:false,});}
toggle(){this.state.show=!this.state.show;}
shouldActivateBackButton(){return this.state.show;}
_onBackButton(ev){assert.step(`${ev.type} event`);}}
DummyComponent.template=xml`<button t-esc="state.show" t-on-click="toggle"/>`;const dummy=new DummyComponent();await dummy.mount(document.getElementById("qunit-fixture"));assert.verifySteps([],"shouldn't have enabled backbutton mount");await testUtils.dom.click(dummy.el);await testUtils.dom.triggerEvent(document,"backbutton");await testUtils.dom.click(dummy.el);assert.verifySteps(["overrideBackButton: true","backbutton event","overrideBackButton: false",],"should have enabled/disabled the back-button override");dummy.unmount();dummy.state.show=true;await dummy.mount(document.getElementById("qunit-fixture"));assert.verifySteps(["overrideBackButton: true"],"shouldn have enabled backbutton at mount");await testUtils.dom.triggerEvent(document,"backbutton");dummy.unmount();assert.verifySteps(["backbutton event","overrideBackButton: false"],"should have disabled the back-button override during unmount");dummy.destroy();mock.unpatch(mobile.methods);});QUnit.module("Dialog");QUnit.test("dialog is closable with backbutton event",async function(assert){assert.expect(7);const __overrideBackButton=mobile.methods.overrideBackButton;mobile.methods.overrideBackButton=function({enabled}){assert.step(`overrideBackButton: ${enabled}`);};testUtils.mock.patch(Dialog,{close:function(){assert.step("close");return this._super.apply(this,arguments);},});const parent=await createParent({data:this.data,archs:{"partner,false,form":`
                    <form>
                        <sheet>
                            <field name="name"/>
                        </sheet>
                   </form>
                `,},});const backButtonEvent=new Event("backbutton");const dialog=new Dialog(parent,{res_model:"partner",res_id:1,}).open();await dialog.opened().then(()=>{assert.step("opened");});assert.containsOnce(document.body,".modal","should have a modal");document.dispatchEvent(backButtonEvent);await testUtils.nextTick();assert.verifySteps(["overrideBackButton: true","opened","close","overrideBackButton: false"],"should have open/close dialog");assert.containsNone(document.body,".modal","modal should be closed");parent.destroy();testUtils.mock.unpatch(Dialog);mobile.methods.overrideBackButton=__overrideBackButton;});QUnit.module("OwlDialog");QUnit.test("dialog is closable with backbutton event",async function(assert){assert.expect(7);mock.patch(mobile.methods,{overrideBackButton({enabled}){assert.step(`overrideBackButton: ${enabled}`);},});class Parent extends Component{constructor(){super(...arguments);this.state=useState({display:true});}
_onDialogClosed(){this.state.display=false;assert.step("dialog_closed");}}
Parent.components={OwlDialog};Parent.env=makeTestEnvironment();Parent.template=xml`
            <div>
                <OwlDialog
                    t-if="state.display"
                    t-on-dialog-closed="_onDialogClosed">
                    Some content
                </OwlDialog>
            </div>`;const parent=new Parent();await parent.mount(testUtils.prepareTarget());assert.containsOnce(document.body,".o_dialog");assert.verifySteps(["overrideBackButton: true"]);await testUtils.dom.triggerEvent(document,"backbutton");assert.verifySteps(["dialog_closed","overrideBackButton: false"]);assert.containsNone(document.body,".o_dialog","should have been closed");parent.destroy();mock.unpatch(mobile.methods);});QUnit.module("Popover");QUnit.test("popover is closable with backbutton event",async function(assert){assert.expect(7);mock.patch(mobile.methods,{overrideBackButton({enabled}){assert.step(`overrideBackButton: ${enabled}`);},});class Parent extends Component{}
Parent.components={Popover};Parent.env=makeTestEnvironment();Parent.template=xml`
            <div>
                <Popover>
                    <t t-set="opened">
                        Some content
                    </t>
                    <button id="target">
                        Show me
                    </button>
                </Popover>
            </div>`;const parent=new Parent();await parent.mount(testUtils.prepareTarget());assert.containsNone(document.body,".o_popover");await testUtils.dom.click(document.querySelector("#target"));assert.containsOnce(document.body,".o_popover");assert.verifySteps(["overrideBackButton: true"]);await testUtils.dom.triggerEvent(document,"backbutton");assert.verifySteps(["overrideBackButton: false"]);assert.containsNone(document.body,".o_popover","should have been closed");parent.destroy();mock.unpatch(mobile.methods);});QUnit.module("ControlPanel");QUnit.test("mobile search: close with backbutton event",async function(assert){assert.expect(7);mock.patch(mobile.methods,{overrideBackButton({enabled}){assert.step(`overrideBackButton: ${enabled}`);},});const actions={1:{id:1,name:"Yes",res_model:"partner",type:"ir.actions.act_window",views:[[false,"list"]],},};const views={"partner,false,list":'<tree><field name="foo"/></tree>',"partner,false,search":`
                <search>
                    <filter string="Active" name="my_projects" domain="[('boolean_field', '=', True)]"/>
                    <field name="foo" string="Foo"/>
                </search>`,};const models={partner:{fields:{foo:{string:"Foo",type:"char"},boolean_field:{string:"I am a boolean",type:"boolean"},},records:[{id:1,display_name:"First record",foo:"yop"}],},};const serverData={actions,models,views};const webClient=await createWebClient({serverData});await doAction(webClient,1);assert.containsNone(document.body,".o_mobile_search");await testUtils.dom.click(webClient.el.querySelector("button.o_enable_searchview"));await testUtils.dom.click(webClient.el.querySelector(".o_toggle_searchview_full"));assert.containsOnce(document.body,".o_mobile_search");assert.verifySteps(["overrideBackButton: true"]);await testUtils.dom.triggerEvent(document,"backbutton");assert.containsNone(document.body,".o_mobile_search");assert.verifySteps(["overrideBackButton: false"]);mock.unpatch(mobile.methods);});QUnit.module("UpdateDeviceAccountControllerMixin");QUnit.test("controller should call native updateAccount method when saving record",async function(assert){assert.expect(4);const __updateAccount=mobile.methods.updateAccount;mobile.methods.updateAccount=function(options){const{avatar,name,username}=options;assert.ok("should call updateAccount");assert.ok(avatar.startsWith(BASE64_PNG_HEADER),"should have a PNG base64 encoded avatar");assert.strictEqual(name,"Marc Demo");assert.strictEqual(username,"demo");return Promise.resolve();};testUtils.mock.patch(session,{url(path){if(path==='/web/image'){return`data:image/png;base64,${MY_IMAGE}`;}
return this._super(...arguments);},});const DummyView=FormView.extend({config:Object.assign({},FormView.prototype.config,{Controller:FormView.prototype.config.Controller.extend(UpdateDeviceAccountControllerMixin),}),});const dummy=await createView({View:DummyView,model:"partner",data:this.data,arch:`
                <form>
                    <sheet>
                        <field name="name"/>
                    </sheet>
                </form>`,viewOptions:{mode:"edit",},session:{username:"demo",name:"Marc Demo",},});await testUtils.form.clickSave(dummy);await dummy.savingDef;dummy.destroy();testUtils.mock.unpatch(session);mobile.methods.updateAccount=__updateAccount;});QUnit.test("controller should call native updateAccount method with SVG avatar when saving record",async function(assert){assert.expect(4);const __updateAccount=mobile.methods.updateAccount;mobile.methods.updateAccount=function(options){const{avatar,name,username}=options;assert.ok("should call updateAccount");assert.ok(avatar.startsWith(BASE64_PNG_HEADER),"should have a PNG base64 encoded avatar");assert.strictEqual(name,"Marc Demo");assert.strictEqual(username,"demo");return Promise.resolve();};testUtils.mock.patch(session,{url(path){if(path==='/web/image'){return`data:image/svg+xml;base64,${BASE64_SVG_IMAGE}`;}
return this._super(...arguments);},});const DummyView=FormView.extend({config:Object.assign({},FormView.prototype.config,{Controller:FormView.prototype.config.Controller.extend(UpdateDeviceAccountControllerMixin),}),});const dummy=await createView({View:DummyView,model:"partner",data:this.data,arch:`
                <form>
                    <sheet>
                        <field name="name"/>
                    </sheet>
                </form>`,viewOptions:{mode:"edit",},session:{username:"demo",name:"Marc Demo",},});await testUtils.form.clickSave(dummy);await dummy.savingDef;dummy.destroy();testUtils.mock.unpatch(session);mobile.methods.updateAccount=__updateAccount;});QUnit.test("UserPreferencesFormView should call native updateAccount method when saving record",async function(assert){assert.expect(4);const __updateAccount=mobile.methods.updateAccount;mobile.methods.updateAccount=function(options){const{avatar,name,username}=options;assert.ok("should call updateAccount");assert.ok(avatar.startsWith(BASE64_PNG_HEADER),"should have a PNG base64 encoded avatar");assert.strictEqual(name,"Marc Demo");assert.strictEqual(username,"demo");return Promise.resolve();};testUtils.mock.patch(session,{url(path){if(path==='/web/image'){return`data:image/png;base64,${MY_IMAGE}`;}
return this._super(...arguments);},});const view=await createView({View:UserPreferencesFormView,model:"users",data:this.data,arch:`
                <form>
                    <sheet>
                        <field name="name"/>
                    </sheet>
                </form>`,viewOptions:{mode:"edit",},session:{username:"demo",name:"Marc Demo",},});await testUtils.form.clickSave(view);await view.savingDef;view.destroy();testUtils.mock.unpatch(session);mobile.methods.updateAccount=__updateAccount;});QUnit.module("FieldDate");QUnit.test("date field: toggle datepicker",async function(assert){assert.expect(8);mock.patch(mobile.methods,{requestDateTimePicker({value,type}){assert.step("requestDateTimePicker");assert.strictEqual(false,value,"field shouldn't have an initial value");assert.strictEqual("date",type,"datepicker's mode should be 'date'");return Promise.resolve({data:"2020-01-12"});},});const form=await createView({View:FormView,model:"partner",data:this.data,arch:'<form><field name="date"/><field name="name"/></form>',translateParameters:{date_format:"%m/%d/%Y",},});assert.containsNone(document.body,".bootstrap-datetimepicker-widget","datepicker shouldn't be present initially");await testUtils.dom.openDatepicker(form.$(".o_datepicker"));assert.containsNone(document.body,".bootstrap-datetimepicker-widget","datepicker shouldn't be opened");assert.verifySteps(["requestDateTimePicker"],"native datepicker should have been called");form.$(".o_datepicker_input").focus();assert.strictEqual(form.$(".o_datepicker_input").val(),"01/12/2020","should be properly formatted");await testUtils.dom.click(form.$(".o_field_widget[name=name]").focus());assert.strictEqual(form.$(".o_datepicker_input").val(),"01/12/2020","shouldn't have changed after loosing focus");form.destroy();mock.unpatch(mobile.methods);});QUnit.module("FieldDateTime");QUnit.test("datetime field: toggle datepicker",async function(assert){assert.expect(8);mock.patch(mobile.methods,{requestDateTimePicker({value,type}){assert.step("requestDateTimePicker");assert.strictEqual(false,value,"field shouldn't have an initial value");assert.strictEqual("datetime",type,"datepicker's mode should be 'datetime'");return Promise.resolve({data:"2020-01-12 12:00:00"});},});const form=await createView({View:FormView,model:"partner",data:this.data,arch:'<form><field name="datetime"/><field name="name"/></form>',translateParameters:{date_format:"%m/%d/%Y",time_format:"%H:%M:%S",},});assert.containsNone(document.body,".bootstrap-datetimepicker-widget","datepicker shouldn't be present initially");await testUtils.dom.openDatepicker(form.$(".o_datepicker"));assert.containsNone(document.body,".bootstrap-datetimepicker-widget","datepicker shouldn't be opened");assert.verifySteps(["requestDateTimePicker"],"native datepicker should have been called");form.$(".o_datepicker_input").focus();assert.strictEqual(form.$(".o_datepicker_input").val(),"01/12/2020 12:00:00","should be properly formatted");await testUtils.dom.click(form.$(".o_field_widget[name=name]").focus());assert.strictEqual(form.$(".o_datepicker_input").val(),"01/12/2020 12:00:00","shouldn't have changed after loosing focus");form.destroy();mock.unpatch(mobile.methods);});});});;

/* /documents/static/tests/documents_test_utils.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('documents.test_utils',function(require){"use strict";const AbstractStorageService=require('web.AbstractStorageService');const RamStorage=require('web.RamStorage');const{start}=require('@mail/utils/test_utils');async function createDocumentsView(params){params.archs=params.archs||{};var searchArch=params.archs[`${params.model},false,search`]||'<search></search>';var searchPanelArch=`
        <searchpanel>
            <field name="folder_id" string="Workspace" enable_counters="1"/>
            <field name="tag_ids" select="multi" groupby="facet_id" enable_counters="1"/>
            <field name="res_model" select="multi" string="Attached To" enable_counters="1"/>
        </searchpanel>
    `;searchArch=searchArch.split('</search>')[0]+searchPanelArch+'</search>';params.archs[`${params.model},false,search`]=searchArch;if(!params.services||!params.services.local_storage){params.services=params.services||{};const RamStorageService=AbstractStorageService.extend({storage:new RamStorage(),});params.services.local_storage=RamStorageService;}
const{widget}=await start(Object.assign({},params,{hasView:true,}));return widget;}
return{createDocumentsView,};});;

/* /documents/static/tests/documents_kanban_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('documents.mobile_tests',function(require){"use strict";const DocumentsKanbanView=require('documents.DocumentsKanbanView');const DocumentsListRenderer=require('documents.DocumentsListRenderer');const DocumentsListView=require('documents.DocumentsListView');const{createDocumentsView}=require('documents.test_utils');const{afterEach,beforeEach}=require('@mail/utils/test_utils');const{dom,mock,nextTick}=require('web.test_utils');QUnit.module('documents',{},function(){QUnit.module('documents_kanban_mobile_tests.js',{beforeEach(){beforeEach(this);Object.assign(this.data,{'documents.document':{fields:{available_rule_ids:{string:"Rules",type:'many2many',relation:'documents.workflow.rule'},folder_id:{string:"Folders",type:'many2one',relation:'documents.folder'},name:{string:"Name",type:'char',default:' '},previous_attachment_ids:{string:"History",type:'many2many',relation:'ir.attachment'},res_model:{string:"Model (technical)",type:'char'},tag_ids:{string:"Tags",type:'many2many',relation:'documents.tag'},owner_id:{string:"Owner",type:"many2one",relation:'res.users'},partner_id:{string:"Related partner",type:'many2one',relation:'res.partner'},},records:[{id:1,available_rule_ids:[],folder_id:1},{id:2,available_rule_ids:[],folder_id:1},],},'documents.folder':{fields:{name:{string:'Name',type:'char'},parent_folder_id:{string:'Parent Workspace',type:'many2one',relation:'documents.folder'},description:{string:'Description',type:'text'},},records:[{id:1,name:'Workspace1',description:'_F1-test-description_',parent_folder_id:false},],},'documents.tag':{fields:{},records:[],get_tags:()=>[],},'mail.alias':{fields:{alias_name:{string:'Name',type:'char'},},records:[{id:1,alias_name:'hazard@rmcf.es'},]},'documents.share':{fields:{name:{string:'Name',type:'char'},folder_id:{string:"Workspace",type:'many2one',relation:'documents.folder'},alias_id:{string:"alias",type:'many2one',relation:'mail.alias'},},records:[{id:1,name:'Share1',folder_id:1,alias_id:1},],},});mock.patch(DocumentsListRenderer,{init(){this._super(...arguments);this.LONG_TOUCH_THRESHOLD=0;}});},afterEach(){afterEach(this);mock.unpatch(DocumentsListRenderer);},},function(){QUnit.module('DocumentsKanbanViewMobile',function(){QUnit.test('basic rendering on mobile',async function(assert){assert.expect(12);const kanban=await createDocumentsView({View:DocumentsKanbanView,model:'documents.document',data:this.data,arch:`
                <kanban>
                    <templates>
                        <t t-name="kanban-box">
                            <div>
                                <field name="name"/>
                            </div>
                        </t>
                    </templates>
                </kanban>
            `,});assert.containsOnce(kanban,'.o_documents_kanban_view',"should have a documents kanban view");assert.containsOnce(kanban,'.o_documents_inspector',"should have a documents inspector");const $controlPanelButtons=$('.o_control_panel .o_cp_buttons');assert.containsOnce($controlPanelButtons,'> .dropdown',"should group ControlPanel's buttons into a dropdown");assert.containsNone($controlPanelButtons,'> .btn',"there should be no button left in the ControlPanel's left part");await dom.click(dom.find(document.body,'.o_search_panel_current_selection'));await dom.click(dom.find(document.body,'.o_search_panel_category_value:first-child header'));await dom.click(dom.find(document.body,'.o_mobile_search_footer'));assert.ok(kanban.$buttons.find('.o_documents_kanban_upload').is(':disabled'),"the upload button should be disabled on global view");assert.ok(kanban.$buttons.find('.o_documents_kanban_url').is(':disabled'),"the upload url button should be disabled on global view");assert.ok(kanban.$buttons.find('.o_documents_kanban_request').is(':disabled'),"the request button should be disabled on global view");assert.ok(kanban.$buttons.find('.o_documents_kanban_share_domain').is(':disabled'),"the share button should be disabled on global view");await dom.click(dom.find(document.body,'.o_search_panel_current_selection'));await dom.click(dom.find(document.body,'.o_search_panel_category_value:nth-child(2) header'));await dom.click(dom.find(document.body,'.o_mobile_search_footer'));assert.ok(kanban.$buttons.find('.o_documents_kanban_upload').not(':disabled'),"the upload button should be enabled when a folder is selected");assert.ok(kanban.$buttons.find('.o_documents_kanban_url').not(':disabled'),"the upload url button should be enabled when a folder is selected");assert.ok(kanban.$buttons.find('.o_documents_kanban_request').not(':disabled'),"the request button should be enabled when a folder is selected");assert.ok(kanban.$buttons.find('.o_documents_kanban_share_domain').not(':disabled'),"the share button should be enabled when a folder is selected");kanban.destroy();});QUnit.module('DocumentsInspector');QUnit.test('toggle inspector based on selection',async function(assert){assert.expect(13);const kanban=await createDocumentsView({View:DocumentsKanbanView,model:'documents.document',data:this.data,arch:`
                <kanban>
                    <templates>
                        <t t-name="kanban-box">
                            <div>
                                <i class="fa fa-circle-thin o_record_selector"/>
                                <field name="name"/>
                            </div>
                        </t>
                    </templates>
                </kanban>
            `,});assert.isNotVisible(kanban.$('.o_documents_mobile_inspector'),"inspector should be hidden when selection is empty");assert.containsN(kanban,'.o_kanban_record:not(.o_kanban_ghost)',2,"should have 2 records in the renderer");await dom.click(kanban.$('.o_kanban_record:first .o_record_selector'));await nextTick();assert.containsOnce(kanban,'.o_kanban_record.o_record_selected:not(.o_kanban_ghost)',"should have 1 record selected");const toggleInspectorSelector='.o_documents_mobile_inspector > .o_documents_toggle_inspector';assert.isVisible(kanban.$(toggleInspectorSelector),"toggle inspector's button should be displayed when selection is not empty");assert.strictEqual(kanban.$(toggleInspectorSelector).text().replace(/\s+/g," ").trim(),'1 document selected');await dom.click(kanban.$(toggleInspectorSelector));assert.isVisible(kanban.$('.o_documents_mobile_inspector'),"inspector should be opened");await dom.click(kanban.$('.o_documents_close_inspector'));assert.isNotVisible(kanban.$('.o_documents_mobile_inspector'),"inspector should be closed");await dom.click(kanban.$('.o_kanban_record:eq(1) .o_record_selector'));await nextTick();assert.containsN(kanban,'.o_kanban_record.o_record_selected:not(.o_kanban_ghost)',2,"should have 2 records selected");assert.strictEqual(kanban.$(toggleInspectorSelector).text().replace(/\s+/g," ").trim(),'2 documents selected');await dom.click(kanban.$('.o_kanban_record:first'));await nextTick();assert.containsOnce(kanban,'.o_kanban_record.o_record_selected:not(.o_kanban_ghost)',"should have 1 record selected");assert.strictEqual(kanban.$(toggleInspectorSelector).text().replace(/\s+/g," ").trim(),'1 document selected');assert.isVisible(kanban.$('.o_documents_mobile_inspector'),"inspector should be opened");await dom.click(kanban.$('.o_documents_close_inspector'));assert.containsOnce(kanban,'.o_kanban_record.o_record_selected:not(.o_kanban_ghost)',"should still have 1 record selected after closing inspector");kanban.destroy();});});QUnit.module('DocumentsListViewMobile',function(){QUnit.test('basic rendering on mobile',async function(assert){assert.expect(12);const list=await createDocumentsView({View:DocumentsListView,model:'documents.document',data:this.data,arch:`
                <tree>
                    <field name="name"/>
                </tree>
            `,});assert.containsOnce(list,'.o_documents_list_view',"should have a documents list view");assert.containsOnce(list,'.o_documents_inspector',"should have a documents inspector");const $controlPanelButtons=$('.o_control_panel .o_cp_buttons');assert.containsOnce($controlPanelButtons,'> .dropdown',"should group ControlPanel's buttons into a dropdown");assert.containsNone($controlPanelButtons,'> .btn',"there should be no button left in the ControlPanel's left part");await dom.click(dom.find(document.body,'.o_search_panel_current_selection'));await dom.click(dom.find(document.body,'.o_search_panel_category_value:first-child header'));await dom.click(dom.find(document.body,'.o_mobile_search_footer'));assert.ok(list.$buttons.find('.o_documents_kanban_upload').is(':disabled'),"the upload button should be disabled on global view");assert.ok(list.$buttons.find('.o_documents_kanban_url').is(':disabled'),"the upload url button should be disabled on global view");assert.ok(list.$buttons.find('.o_documents_kanban_request').is(':disabled'),"the request button should be disabled on global view");assert.ok(list.$buttons.find('.o_documents_kanban_share_domain').is(':disabled'),"the share button should be disabled on global view");await dom.click(dom.find(document.body,'.o_search_panel_current_selection'));await dom.click(dom.find(document.body,'.o_search_panel_category_value:nth-child(2) header'));await dom.click(dom.find(document.body,'.o_mobile_search_footer'));assert.ok(list.$buttons.find('.o_documents_kanban_upload').not(':disabled'),"the upload button should be enabled when a folder is selected");assert.ok(list.$buttons.find('.o_documents_kanban_url').not(':disabled'),"the upload url button should be enabled when a folder is selected");assert.ok(list.$buttons.find('.o_documents_kanban_request').not(':disabled'),"the request button should be enabled when a folder is selected");assert.ok(list.$buttons.find('.o_documents_kanban_share_domain').not(':disabled'),"the share button should be enabled when a folder is selected");list.destroy();});QUnit.module('DocumentsInspector');QUnit.test('toggle inspector based on selection',async function(assert){assert.expect(15);const list=await createDocumentsView({touchScreen:true,View:DocumentsListView,model:'documents.document',data:this.data,arch:`
                <tree>
                    <field name="name"/>
                </tree>
            `,});assert.isNotVisible(list.$('.o_documents_mobile_inspector'),"inspector should be hidden when selection is empty");assert.containsN(list,'.o_document_list_record',2,"should have 2 records in the renderer");await dom.triggerEvent(list.$('.o_document_list_record:first'),'touchstart');await dom.triggerEvent(list.$('.o_document_list_record:first'),'touchend');await nextTick();assert.containsOnce(list,'.o_document_list_record.o_data_row_selected',"should have 1 record selected");const toggleInspectorSelector='.o_documents_mobile_inspector > .o_documents_toggle_inspector';assert.isVisible(list.$(toggleInspectorSelector),"toggle inspector's button should be displayed when selection is not empty");assert.strictEqual(list.$(toggleInspectorSelector).text().replace(/\s+/g," ").trim(),'1 document selected');await dom.click(list.$(toggleInspectorSelector));assert.isVisible(list.$('.o_documents_mobile_inspector > *:not(.o_documents_toggle_inspector)'),"inspector should be opened");await dom.click(list.$('.o_documents_close_inspector'));assert.isNotVisible(list.$('.o_documents_mobile_inspector > *:not(.o_documents_toggle_inspector)'),"inspector should be closed");await dom.triggerEvent(list.$('.o_document_list_record:eq(1)'),'touchstart');await dom.triggerEvent(list.$('.o_document_list_record:eq(1)'),'touchend');await nextTick();assert.containsN(list,'.o_document_list_record.o_data_row_selected',2,"should have 2 records selected");assert.strictEqual(list.$(toggleInspectorSelector).text().replace(/\s+/g," ").trim(),'2 documents selected');assert.isNotVisible(list.$('.o_documents_mobile_inspector > *:not(.o_documents_toggle_inspector)'),"inspector should stay closed");await dom.click(list.$('.o_discard_selection'));await nextTick();assert.containsNone(list,'.o_document_list_record.o_data_row_selected',"shouldn't have record selected");await dom.click(list.$('.o_document_list_record:first'));await nextTick();assert.containsOnce(list,'.o_document_list_record.o_data_row_selected',"should have 1 record selected");assert.strictEqual(list.$(toggleInspectorSelector).text().replace(/\s+/g," ").trim(),'1 document selected');assert.isVisible(list.$('.o_documents_mobile_inspector > *:not(.o_documents_toggle_inspector)'),"inspector should be opened");await dom.click(list.$('.o_documents_close_inspector'));assert.containsOnce(list,'.o_document_list_record.o_data_row_selected',"should still have 1 record selected after closing inspector");list.destroy();});});});});});;

/* /web_grid/static/tests/grid_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_grid.grid_mobile_tests',function(require){"use strict";let GridView=require('web_grid.GridView');let testUtils=require('web.test_utils');let createView=testUtils.createView;QUnit.module('Views',{beforeEach:function(){this.data={'analytic.line':{fields:{project_id:{string:"Project",type:"many2one",relation:"project"},task_id:{string:"Task",type:"many2one",relation:"task"},date:{string:"Date",type:"date"},unit_amount:{string:"Unit Amount",type:"float"},},records:[{id:1,project_id:31,date:"2017-01-24",unit_amount:2.5},{id:2,project_id:31,task_id:1,date:"2017-01-25",unit_amount:2},{id:3,project_id:31,task_id:1,date:"2017-01-25",unit_amount:5.5},{id:4,project_id:31,task_id:1,date:"2017-01-30",unit_amount:10},{id:5,project_id:142,task_id:12,date:"2017-01-31",unit_amount:3.5},]},project:{fields:{name:{string:"Project Name",type:"char"}},records:[{id:31,display_name:"P1"},{id:142,display_name:"Webocalypse Now"},]},task:{fields:{name:{string:"Task Name",type:"char"},project_id:{string:"Project",type:"many2one",relation:"project"},},records:[{id:1,display_name:"BS task",project_id:31},{id:12,display_name:"Another BS task",project_id:142},{id:54,display_name:"yet another task",project_id:142},]},};this.arch=`
            <grid string="Timesheet" adjustment="object" adjust_name="adjust_grid">
                <field name="project_id" type="row"/>
                <field name="task_id" type="row"/>
                <field name="date" type="col">
                    <range name="week" string="Week" span="week" step="day"/>
                </field>
                <field name="unit_amount" type="measure" widget="float_time"/>
            </grid>
        `;}},function(){QUnit.module('GridView Mobile');QUnit.test('basic grid view, range button in mobile',async function(assert){assert.expect(5);let countCallRPC=0;let grid=await createView({View:GridView,model:'analytic.line',data:this.data,arch:this.arch,currentDate:"2017-01-25",mockRPC:function(route,args){if(args.method==='read_grid'){if(countCallRPC===0){assert.equal(args.kwargs.range.span,'day',"range should be day");}else if(countCallRPC===1){assert.equal(args.kwargs.range.span,'week',"range should be month");}}
countCallRPC++;return this._super.apply(this,arguments);},});await testUtils.nextTick();assert.equal(grid.$('table').length,1,"should have rendered one table");let btnCal=grid.$buttons.find('.btn-group.o_grid_range > button.btn.fa-calendar');assert.equal(btnCal.length,1,"should have a calendar button for range");await testUtils.dom.click(btnCal);let btnRange=grid.$buttons.find('.btn-group.o_grid_range button.grid_arrow_range');assert.equal(btnRange.length,2,"should have two range buttons (Day and Week)");await testUtils.dom.click(grid.$buttons.find('button[data-name=week]'));grid.destroy();});});});;

/* /web_grid/static/tests/mock_server.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('web_grid.MockServer',function(require){"use strict";var MockServer=require('web.MockServer');MockServer.include({_performRpc:function(route,args){if(args.method==='read_grid'){return this._mockReadGrid(args.model,args.kwargs);}else if(args.method==='read_grid_domain'){return this._mockReadGridDomain(args.model,args.kwargs);}else if(args.method==='adjust_grid'){var domain=args.args[1];var columnField=args.args[2];var columnValue=args.args[3];var cellField=args.args[4];var change=args.args[5];var lines=this._mockSearchReadController({model:args.model,domain:domain,fields:[],});var newID=this._mockCopy(args.model,lines.records[0].id);var newRecord=_.findWhere(this.data[args.model].records,{id:newID});newRecord[cellField]=change;newRecord[columnField]=columnValue.split('/')[0];return Promise.resolve({});}else{return this._super(route,args);}},_mockReadGrid:function(model,kwargs){var self=this;var gridAnchor=moment(kwargs.context.grid_anchor||this.currentDate);var today=moment();var span=kwargs.range.span;var start=gridAnchor.clone().startOf(span==='day'?'day':span==='week'?'isoWeek':'month');var end=gridAnchor.clone().endOf(span==='day'?'day':span==='week'?'isoWeek':'month');var nextAnchor=gridAnchor.clone().add(1,span==='day'?'day':span==='week'?'weeks':'month').format('YYYY-MM-DD');var prevAnchor=gridAnchor.clone().subtract(1,span==='day'?'day':span==='week'?'weeks':'month').format('YYYY-MM-DD');var columns=[];var current=start.clone().subtract(1,'days');var unavailable=end.clone().subtract(2,'days');while(!current.isSame(end,'days')){current.add(1,'days');var dayStr=current.format('YYYY-MM-DD');var nextDayStr=current.clone().add(1,'days').format('YYYY-MM-DD');columns.push({is_current:current.isSame(today),is_unavailable:unavailable.isSame(current,'day'),domain:["&",["date",">=",dayStr],["date","<",nextDayStr]],values:{date:[dayStr+'/'+nextDayStr,current.format('ddd,\nMMM\u00a0DD')]}});}
var rows=[];var domain=['&',[kwargs.col_field,'>=',start.format('YYYY-MM-DD')],[kwargs.col_field,'<=',end.format('YYYY-MM-DD')]].concat(kwargs.domain);var groups=this._mockReadGroup(model,{domain:domain,fields:[kwargs.cell_field],groupby:[kwargs.row_fields[0]],});_.each(groups,function(group){var groupValue={};groupValue[kwargs.row_fields[0]]=group[kwargs.row_fields[0]];var groupDomain=['&'].concat(domain).concat(group.__domain);if(kwargs.row_fields[1]){var subGroups=self._mockReadGroup(model,{domain:groupDomain,fields:[kwargs.cell_field],groupby:[kwargs.row_fields[1]],});_.each(subGroups,function(subGroup){var subGroupDomain=['&'].concat(groupDomain,subGroup.__domain);var values=_.extend({},groupValue);values[kwargs.row_fields[1]]=subGroup[kwargs.row_fields[1]]||false;rows.unshift({domain:subGroupDomain,values:values,});});}else{rows.unshift({domain:groupDomain,values:groupValue,});}});var grid=[];_.each(rows,function(row){var cells=[];_.each(columns,function(col){var cellDomain=['&'].concat(row.domain).concat(col.domain);var read_fields=kwargs.readonly_field?[kwargs.cell_field,kwargs.readonly_field]:[kwargs.cell_field];var records=self._mockSearchReadController({model:model,domain:cellDomain,fields:read_fields,});var value=0;_.each(records.records,function(rec){value+=rec[kwargs.cell_field];});var readonly_dict={};readonly_dict[kwargs.readonly_field]=true;cells.push({size:records.length,value:value,is_current:col.is_current,is_unavailable:col.is_unavailable,readonly:_.isMatch(records.records[0],readonly_dict),domain:cellDomain,});});grid.push(cells);});return Promise.resolve({cols:columns,rows:rows,grid:grid,prev:{default_date:prevAnchor,grid_anchor:prevAnchor,},next:{default_date:nextAnchor,grid_anchor:nextAnchor,},});},_mockReadGridDomain:function(model,kwargs){if(kwargs.context&&kwargs.context.grid_anchor&&kwargs.range&&kwargs.range.span){var gridAnchor=moment(kwargs.context.grid_anchor||this.currentDate);var span=kwargs.range.span;var start=gridAnchor.clone().startOf(span==='day'?'day':span==='week'?'isoWeek':'month');var end=gridAnchor.clone().endOf(span==='day'?'day':span==='week'?'isoWeek':'month');return Promise.resolve(['&',['date','>=',start.format('YYYY-MM-DD')],['date','<=',end.format('YYYY-MM-DD')],]);}
return Promise.resolve(['&',['date','>=','2017-01-01'],['date','<=','2017-01-31'],]);},});});;

/* /hr_mobile/static/tests/language_mobile_tests.js defined in bundle 'web.qunit_mobile_suite_tests' */
odoo.define('hr_mobile.language_mobile_tests',function(require){"use strict";const EmployeeProfileFormView=require('@hr/js/language')[Symbol.for("default")];const session=require('web.session');const testUtils=require('web.test_utils');const mobile=require('web_mobile.core');const{base64ToBlob}=require('web_mobile.testUtils');const{createView}=testUtils;const MY_IMAGE='iVBORw0KGgoAAAANSUhEUgAAAAUAAAAFCAYAAACNbyblAAAAHElEQVQI12P4//8/w38GIAXDIBKE0DHxgljNBAAO9TXL0Y4OHwAAAABJRU5ErkJggg==';const BASE64_PNG_HEADER="iVBORw0KGg";QUnit.module('hr_mobile',{beforeEach(){this.data={users:{fields:{name:{string:"name",type:"char"},},records:[],},};},},function(){QUnit.test('EmployeeProfileFormView should call native updateAccount method when saving record',async function(assert){assert.expect(4);const __updateAccount=mobile.methods.updateAccount;mobile.methods.updateAccount=function(options){const{avatar,name,username}=options;assert.ok("should call updateAccount");assert.ok(avatar.startsWith(BASE64_PNG_HEADER),"should have a PNG base64 encoded avatar");assert.strictEqual(name,"Marc Demo");assert.strictEqual(username,"demo");return Promise.resolve();};testUtils.mock.patch(session,{url(path){if(path==='/web/image'){return`data:image/png;base64,${MY_IMAGE}`;}
return this._super(...arguments);},});const view=await createView({View:EmployeeProfileFormView,model:'users',data:this.data,arch:`
                    <form>
                        <sheet>
                            <field name="name"/>
                        </sheet>
                    </form>`,viewOptions:{mode:'edit',},session:{username:"demo",name:"Marc Demo",}});await testUtils.form.clickSave(view);await view.savingDef;view.destroy();testUtils.mock.unpatch(session);mobile.methods.updateAccount=__updateAccount;});});});